import _classCallCheck from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createClass";
export var DivEvent = /*#__PURE__*/ function() {
    function DivEvent() {
        _classCallCheck(this, DivEvent);

        this.selectors = [];
        this.enable = false;
        this.mode = [];
        this.type = "circle";
    }

    _createClass(DivEvent, [{
        key: "elementId",
        get: function get() {
            return this.ids;
        },
        set: function set(value) {
            this.ids = value;
        }
    }, {
        key: "el",
        get: function get() {
            return this.elementId;
        },
        set: function set(value) {
            this.elementId = value;
        }
    }, {
        key: "ids",
        get: function get() {
            return this.selectors instanceof Array ? this.selectors.map(function(t) {
                return t.replace("#", "");
            }) : this.selectors.replace("#", "");
        },
        set: function set(value) {
            this.selectors = value instanceof Array ? value.map(function(t) {
                return "#".concat(t);
            }) : "#".concat(value);
        }
    }, {
        key: "load",
        value: function load(data) {
            var _a, _b;

            if (data === undefined) {
                return;
            }

            var ids = (_b = (_a = data.ids) !== null && _a !== void 0 ? _a : data.elementId) !== null && _b !== void 0 ? _b : data.el;

            if (ids !== undefined) {
                this.ids = ids;
            }

            if (data.selectors !== undefined) {
                this.selectors = data.selectors;
            }

            if (data.enable !== undefined) {
                this.enable = data.enable;
            }

            if (data.mode !== undefined) {
                this.mode = data.mode;
            }

            if (data.type !== undefined) {
                this.type = data.type;
            }
        }
    }]);

    return DivEvent;
}();