import _createForOfIteratorHelper from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createForOfIteratorHelper";
import _classCallCheck from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createClass";

var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};

var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};

var _Options_instances, _Options_engine, _Options_findDefaultTheme;

import {
    Background
} from "./Background/Background";
import {
    BackgroundMask
} from "./BackgroundMask/BackgroundMask";
import {
    FullScreen
} from "./FullScreen/FullScreen";
import {
    Interactivity
} from "./Interactivity/Interactivity";
import {
    ManualParticle
} from "./ManualParticle";
import {
    Motion
} from "./Motion/Motion";
import {
    ParticlesOptions
} from "./Particles/ParticlesOptions";
import {
    Responsive
} from "./Responsive";
import {
    Theme
} from "./Theme/Theme";
import {
    deepExtend
} from "../../Utils/Utils";
export var Options = /*#__PURE__*/ function() {
    function Options(engine) {
        _classCallCheck(this, Options);

        _Options_instances.add(this);

        _Options_engine.set(this, void 0);

        __classPrivateFieldSet(this, _Options_engine, engine, "f");

        this.autoPlay = true;
        this.background = new Background();
        this.backgroundMask = new BackgroundMask();
        this.fullScreen = new FullScreen();
        this.detectRetina = true;
        this.duration = 0;
        this.fpsLimit = 120;
        this.interactivity = new Interactivity();
        this.manualParticles = [];
        this.motion = new Motion();
        this.particles = new ParticlesOptions();
        this.pauseOnBlur = true;
        this.pauseOnOutsideViewport = true;
        this.responsive = [];
        this.style = {};
        this.themes = [];
        this.zLayers = 100;
    }

    _createClass(Options, [{
        key: "fps_limit",
        get: function get() {
            return this.fpsLimit;
        },
        set: function set(value) {
            this.fpsLimit = value;
        }
    }, {
        key: "retina_detect",
        get: function get() {
            return this.detectRetina;
        },
        set: function set(value) {
            this.detectRetina = value;
        }
    }, {
        key: "backgroundMode",
        get: function get() {
            return this.fullScreen;
        },
        set: function set(value) {
            this.fullScreen.load(value);
        }
    }, {
        key: "load",
        value: function load(data) {
            var _a, _b, _c, _d, _e;

            if (data === undefined) {
                return;
            }

            if (data.preset !== undefined) {
                if (data.preset instanceof Array) {
                    var _iterator = _createForOfIteratorHelper(data.preset),
                        _step;

                    try {
                        for (_iterator.s(); !(_step = _iterator.n()).done;) {
                            var preset = _step.value;
                            this.importPreset(preset);
                        }
                    } catch (err) {
                        _iterator.e(err);
                    } finally {
                        _iterator.f();
                    }
                } else {
                    this.importPreset(data.preset);
                }
            }

            if (data.autoPlay !== undefined) {
                this.autoPlay = data.autoPlay;
            }

            var detectRetina = (_a = data.detectRetina) !== null && _a !== void 0 ? _a : data.retina_detect;

            if (detectRetina !== undefined) {
                this.detectRetina = detectRetina;
            }

            if (data.duration !== undefined) {
                this.duration = data.duration;
            }

            var fpsLimit = (_b = data.fpsLimit) !== null && _b !== void 0 ? _b : data.fps_limit;

            if (fpsLimit !== undefined) {
                this.fpsLimit = fpsLimit;
            }

            if (data.pauseOnBlur !== undefined) {
                this.pauseOnBlur = data.pauseOnBlur;
            }

            if (data.pauseOnOutsideViewport !== undefined) {
                this.pauseOnOutsideViewport = data.pauseOnOutsideViewport;
            }

            if (data.zLayers !== undefined) {
                this.zLayers = data.zLayers;
            }

            this.background.load(data.background);
            var fullScreen = (_c = data.fullScreen) !== null && _c !== void 0 ? _c : data.backgroundMode;

            if (typeof fullScreen === "boolean") {
                this.fullScreen.enable = fullScreen;
            } else {
                this.fullScreen.load(fullScreen);
            }

            this.backgroundMask.load(data.backgroundMask);
            this.interactivity.load(data.interactivity);

            if (data.manualParticles !== undefined) {
                this.manualParticles = data.manualParticles.map(function(t) {
                    var tmp = new ManualParticle();
                    tmp.load(t);
                    return tmp;
                });
            }

            this.motion.load(data.motion);
            this.particles.load(data.particles);
            this.style = deepExtend(this.style, data.style);

            __classPrivateFieldGet(this, _Options_engine, "f").plugins.loadOptions(this, data);

            if (data.responsive !== undefined) {
                var _iterator2 = _createForOfIteratorHelper(data.responsive),
                    _step2;

                try {
                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                        var responsive = _step2.value;
                        var optResponsive = new Responsive();
                        optResponsive.load(responsive);
                        this.responsive.push(optResponsive);
                    }
                } catch (err) {
                    _iterator2.e(err);
                } finally {
                    _iterator2.f();
                }
            }

            this.responsive.sort(function(a, b) {
                return a.maxWidth - b.maxWidth;
            });

            if (data.themes !== undefined) {
                var _iterator3 = _createForOfIteratorHelper(data.themes),
                    _step3;

                try {
                    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                        var theme = _step3.value;
                        var optTheme = new Theme();
                        optTheme.load(theme);
                        this.themes.push(optTheme);
                    }
                } catch (err) {
                    _iterator3.e(err);
                } finally {
                    _iterator3.f();
                }
            }

            this.defaultDarkTheme = (_d = __classPrivateFieldGet(this, _Options_instances, "m", _Options_findDefaultTheme).call(this, "dark")) === null || _d === void 0 ? void 0 : _d.name;
            this.defaultLightTheme = (_e = __classPrivateFieldGet(this, _Options_instances, "m", _Options_findDefaultTheme).call(this, "light")) === null || _e === void 0 ? void 0 : _e.name;
        }
    }, {
        key: "setTheme",
        value: function setTheme(name) {
            if (name) {
                var chosenTheme = this.themes.find(function(theme) {
                    return theme.name === name;
                });

                if (chosenTheme) {
                    this.load(chosenTheme.options);
                }
            } else {
                var mediaMatch = typeof matchMedia !== "undefined" && matchMedia("(prefers-color-scheme: dark)"),
                    clientDarkMode = mediaMatch && mediaMatch.matches,
                    defaultTheme = __classPrivateFieldGet(this, _Options_instances, "m", _Options_findDefaultTheme).call(this, clientDarkMode ? "dark" : "light");

                if (defaultTheme) {
                    this.load(defaultTheme.options);
                }
            }
        }
    }, {
        key: "setResponsive",
        value: function setResponsive(width, pxRatio, defaultOptions) {
            this.load(defaultOptions);
            var responsiveOptions = this.responsive.find(function(t) {
                return t.mode === "screen" && screen ? t.maxWidth * pxRatio > screen.availWidth : t.maxWidth * pxRatio > width;
            });
            this.load(responsiveOptions === null || responsiveOptions === void 0 ? void 0 : responsiveOptions.options);
            return responsiveOptions === null || responsiveOptions === void 0 ? void 0 : responsiveOptions.maxWidth;
        }
    }, {
        key: "importPreset",
        value: function importPreset(preset) {
            this.load(__classPrivateFieldGet(this, _Options_engine, "f").plugins.getPreset(preset));
        }
    }]);

    return Options;
}();
_Options_engine = new WeakMap(), _Options_instances = new WeakSet(), _Options_findDefaultTheme = function _Options_findDefaultTheme(mode) {
    var _a;

    return (_a = this.themes.find(function(theme) {
        return theme.default.value && theme.default.mode === mode;
    })) !== null && _a !== void 0 ? _a : this.themes.find(function(theme) {
        return theme.default.value && theme.default.mode === "any";
    });
};