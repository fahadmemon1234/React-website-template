import _classCallCheck from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createClass";
import {
    LinksShadow
} from "./LinksShadow";
import {
    LinksTriangle
} from "./LinksTriangle";
import {
    OptionsColor
} from "../../OptionsColor";
export var Links = /*#__PURE__*/ function() {
    function Links() {
        _classCallCheck(this, Links);

        this.blink = false;
        this.color = new OptionsColor();
        this.consent = false;
        this.distance = 100;
        this.enable = false;
        this.frequency = 1;
        this.opacity = 1;
        this.shadow = new LinksShadow();
        this.triangles = new LinksTriangle();
        this.width = 1;
        this.warp = false;
    }

    _createClass(Links, [{
        key: "load",
        value: function load(data) {
            if (data === undefined) {
                return;
            }

            if (data.id !== undefined) {
                this.id = data.id;
            }

            if (data.blink !== undefined) {
                this.blink = data.blink;
            }

            this.color = OptionsColor.create(this.color, data.color);

            if (data.consent !== undefined) {
                this.consent = data.consent;
            }

            if (data.distance !== undefined) {
                this.distance = data.distance;
            }

            if (data.enable !== undefined) {
                this.enable = data.enable;
            }

            if (data.frequency !== undefined) {
                this.frequency = data.frequency;
            }

            if (data.opacity !== undefined) {
                this.opacity = data.opacity;
            }

            this.shadow.load(data.shadow);
            this.triangles.load(data.triangles);

            if (data.width !== undefined) {
                this.width = data.width;
            }

            if (data.warp !== undefined) {
                this.warp = data.warp;
            }
        }
    }]);

    return Links;
}();