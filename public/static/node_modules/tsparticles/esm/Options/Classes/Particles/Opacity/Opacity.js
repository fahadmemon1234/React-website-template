import _classCallCheck from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createClass";
import _get from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/get";
import _getPrototypeOf from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/getPrototypeOf";
import _inherits from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/inherits";
import _createSuper from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createSuper";
import {
    OpacityAnimation
} from "./OpacityAnimation";
import {
    ValueWithRandom
} from "../../ValueWithRandom";
import {
    setRangeValue
} from "../../../../Utils/NumberUtils";
export var Opacity = /*#__PURE__*/ function(_ValueWithRandom) {
    _inherits(Opacity, _ValueWithRandom);

    var _super = _createSuper(Opacity);

    function Opacity() {
        var _this;

        _classCallCheck(this, Opacity);

        _this = _super.call(this);
        _this.animation = new OpacityAnimation();
        _this.random.minimumValue = 0.1;
        _this.value = 1;
        return _this;
    }

    _createClass(Opacity, [{
        key: "anim",
        get: function get() {
            return this.animation;
        },
        set: function set(value) {
            this.animation = value;
        }
    }, {
        key: "load",
        value: function load(data) {
            var _a;

            if (!data) {
                return;
            }

            _get(_getPrototypeOf(Opacity.prototype), "load", this).call(this, data);

            var animation = (_a = data.animation) !== null && _a !== void 0 ? _a : data.anim;

            if (animation !== undefined) {
                this.animation.load(animation);
                this.value = setRangeValue(this.value, this.animation.enable ? this.animation.minimumValue : undefined);
            }
        }
    }]);

    return Opacity;
}(ValueWithRandom);