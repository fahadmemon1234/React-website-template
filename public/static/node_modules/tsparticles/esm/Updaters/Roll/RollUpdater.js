import _classCallCheck from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createClass";
import {
    colorToHsl
} from "../../Utils/ColorUtils";
import {
    getRangeValue
} from "../../Utils/NumberUtils";

function updateRoll(particle, delta) {
    var roll = particle.options.roll;

    if (!particle.roll || !roll.enable) {
        return;
    }

    var speed = particle.roll.speed * delta.factor;
    var max = 2 * Math.PI;
    particle.roll.angle += speed;

    if (particle.roll.angle > max) {
        particle.roll.angle -= max;
    }
}

export var RollUpdater = /*#__PURE__*/ function() {
    function RollUpdater() {
        _classCallCheck(this, RollUpdater);
    }

    _createClass(RollUpdater, [{
        key: "init",
        value: function init(particle) {
            var rollOpt = particle.options.roll;

            if (rollOpt.enable) {
                particle.roll = {
                    angle: Math.random() * Math.PI * 2,
                    speed: getRangeValue(rollOpt.speed) / 360
                };

                if (rollOpt.backColor) {
                    particle.backColor = colorToHsl(rollOpt.backColor);
                } else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {
                    var alterType = Math.random() >= 0.5 ? "darken" : "enlighten";
                    particle.roll.alter = {
                        type: alterType,
                        value: getRangeValue(alterType === "darken" ? rollOpt.darken.value : rollOpt.enlighten.value)
                    };
                } else if (rollOpt.darken.enable) {
                    particle.roll.alter = {
                        type: "darken",
                        value: getRangeValue(rollOpt.darken.value)
                    };
                } else if (rollOpt.enlighten.enable) {
                    particle.roll.alter = {
                        type: "enlighten",
                        value: getRangeValue(rollOpt.enlighten.value)
                    };
                }
            } else {
                particle.roll = {
                    angle: 0,
                    speed: 0
                };
            }
        }
    }, {
        key: "isEnabled",
        value: function isEnabled(particle) {
            var roll = particle.options.roll;
            return !particle.destroyed && !particle.spawning && roll.enable;
        }
    }, {
        key: "update",
        value: function update(particle, delta) {
            if (!this.isEnabled(particle)) {
                return;
            }

            updateRoll(particle, delta);
        }
    }]);

    return RollUpdater;
}();