import _classCallCheck from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createClass";
import {
    getRangeValue
} from "../../Utils/NumberUtils";

function updateWobble(particle, delta) {
    var _a;

    var wobble = particle.options.wobble;

    if (!wobble.enable || !particle.wobble) {
        return;
    }

    var speed = particle.wobble.speed * delta.factor;
    var distance = ((_a = particle.retina.wobbleDistance) !== null && _a !== void 0 ? _a : 0) * delta.factor / (1000 / 60);
    var max = 2 * Math.PI;
    particle.wobble.angle += speed;

    if (particle.wobble.angle > max) {
        particle.wobble.angle -= max;
    }

    particle.position.x += distance * Math.cos(particle.wobble.angle);
    particle.position.y += distance * Math.abs(Math.sin(particle.wobble.angle));
}

export var WobbleUpdater = /*#__PURE__*/ function() {
    function WobbleUpdater(container) {
        _classCallCheck(this, WobbleUpdater);

        this.container = container;
    }

    _createClass(WobbleUpdater, [{
        key: "init",
        value: function init(particle) {
            var wobbleOpt = particle.options.wobble;

            if (wobbleOpt.enable) {
                particle.wobble = {
                    angle: Math.random() * Math.PI * 2,
                    speed: getRangeValue(wobbleOpt.speed) / 360
                };
            } else {
                particle.wobble = {
                    angle: 0,
                    speed: 0
                };
            }

            particle.retina.wobbleDistance = getRangeValue(wobbleOpt.distance) * this.container.retina.pixelRatio;
        }
    }, {
        key: "isEnabled",
        value: function isEnabled(particle) {
            return !particle.destroyed && !particle.spawning && particle.options.wobble.enable;
        }
    }, {
        key: "update",
        value: function update(particle, delta) {
            if (!this.isEnabled(particle)) {
                return;
            }

            updateWobble(particle, delta);
        }
    }]);

    return WobbleUpdater;
}();