import _classCallCheck from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createClass";
import {
    getRangeValue,
    randomInRange,
    setRangeValue
} from "../../Utils/NumberUtils";
export var LifeUpdater = /*#__PURE__*/ function() {
    function LifeUpdater(container) {
        _classCallCheck(this, LifeUpdater);

        this.container = container;
    }

    _createClass(LifeUpdater, [{
        key: "init",
        value: function init() {}
    }, {
        key: "isEnabled",
        value: function isEnabled(particle) {
            return !particle.destroyed;
        }
    }, {
        key: "update",
        value: function update(particle, delta) {
            if (!this.isEnabled(particle)) {
                return;
            }

            var life = particle.life;
            var justSpawned = false;

            if (particle.spawning) {
                life.delayTime += delta.value;

                if (life.delayTime >= particle.life.delay) {
                    justSpawned = true;
                    particle.spawning = false;
                    life.delayTime = 0;
                    life.time = 0;
                } else {
                    return;
                }
            }

            if (life.duration === -1) {
                return;
            }

            if (particle.spawning) {
                return;
            }

            if (justSpawned) {
                life.time = 0;
            } else {
                life.time += delta.value;
            }

            if (life.time < life.duration) {
                return;
            }

            life.time = 0;

            if (particle.life.count > 0) {
                particle.life.count--;
            }

            if (particle.life.count === 0) {
                particle.destroy();
                return;
            }

            var canvasSize = this.container.canvas.size,
                widthRange = setRangeValue(0, canvasSize.width),
                heightRange = setRangeValue(0, canvasSize.width);
            particle.position.x = randomInRange(widthRange);
            particle.position.y = randomInRange(heightRange);
            particle.spawning = true;
            life.delayTime = 0;
            life.time = 0;
            particle.reset();
            var lifeOptions = particle.options.life;
            life.delay = getRangeValue(lifeOptions.delay.value) * 1000;
            life.duration = getRangeValue(lifeOptions.duration.value) * 1000;
        }
    }]);

    return LifeUpdater;
}();