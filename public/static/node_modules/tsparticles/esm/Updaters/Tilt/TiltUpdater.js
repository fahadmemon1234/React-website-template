import _classCallCheck from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createClass";
import {
    getRangeValue
} from "../../Utils/NumberUtils";

function updateTilt(particle, delta) {
    var _a;

    if (!particle.tilt) {
        return;
    }

    var tilt = particle.options.tilt;
    var tiltAnimation = tilt.animation;
    var speed = ((_a = particle.tilt.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;
    var max = 2 * Math.PI;

    if (!tiltAnimation.enable) {
        return;
    }

    switch (particle.tilt.status) {
        case 0:
            particle.tilt.value += speed;

            if (particle.tilt.value > max) {
                particle.tilt.value -= max;
            }

            break;

        case 1:
        default:
            particle.tilt.value -= speed;

            if (particle.tilt.value < 0) {
                particle.tilt.value += max;
            }

            break;
    }
}

export var TiltUpdater = /*#__PURE__*/ function() {
    function TiltUpdater(container) {
        _classCallCheck(this, TiltUpdater);

        this.container = container;
    }

    _createClass(TiltUpdater, [{
        key: "init",
        value: function init(particle) {
            var tiltOptions = particle.options.tilt;
            particle.tilt = {
                enable: tiltOptions.enable,
                value: getRangeValue(tiltOptions.value) * Math.PI / 180,
                sinDirection: Math.random() >= 0.5 ? 1 : -1,
                cosDirection: Math.random() >= 0.5 ? 1 : -1
            };
            var tiltDirection = tiltOptions.direction;

            if (tiltDirection === "random") {
                var index = Math.floor(Math.random() * 2);
                tiltDirection = index > 0 ? "counter-clockwise" : "clockwise";
            }

            switch (tiltDirection) {
                case "counter-clockwise":
                case "counterClockwise":
                    particle.tilt.status = 1;
                    break;

                case "clockwise":
                    particle.tilt.status = 0;
                    break;
            }

            var tiltAnimation = particle.options.tilt.animation;

            if (tiltAnimation.enable) {
                particle.tilt.velocity = getRangeValue(tiltAnimation.speed) / 360 * this.container.retina.reduceFactor;

                if (!tiltAnimation.sync) {
                    particle.tilt.velocity *= Math.random();
                }
            }
        }
    }, {
        key: "isEnabled",
        value: function isEnabled(particle) {
            var tilt = particle.options.tilt;
            var tiltAnimation = tilt.animation;
            return !particle.destroyed && !particle.spawning && tiltAnimation.enable;
        }
    }, {
        key: "update",
        value: function update(particle, delta) {
            if (!this.isEnabled(particle)) {
                return;
            }

            updateTilt(particle, delta);
        }
    }]);

    return TiltUpdater;
}();