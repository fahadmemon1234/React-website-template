import _classCallCheck from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createClass";
import {
    clamp
} from "../../Utils/NumberUtils";

function checkDestroy(particle, value, minValue, maxValue) {
    switch (particle.options.size.animation.destroy) {
        case "max":
            if (value >= maxValue) {
                particle.destroy();
            }

            break;

        case "min":
            if (value <= minValue) {
                particle.destroy();
            }

            break;
    }
}

function updateSize(particle, delta) {
    var _a, _b, _c, _d;

    var sizeVelocity = ((_a = particle.size.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;
    var minValue = particle.size.min;
    var maxValue = particle.size.max;

    if (particle.destroyed || !particle.size.enable || ((_b = particle.size.maxLoops) !== null && _b !== void 0 ? _b : 0) > 0 && ((_c = particle.size.loops) !== null && _c !== void 0 ? _c : 0) > ((_d = particle.size.maxLoops) !== null && _d !== void 0 ? _d : 0)) {
        return;
    }

    switch (particle.size.status) {
        case 0:
            if (particle.size.value >= maxValue) {
                particle.size.status = 1;

                if (!particle.size.loops) {
                    particle.size.loops = 0;
                }

                particle.size.loops++;
            } else {
                particle.size.value += sizeVelocity;
            }

            break;

        case 1:
            if (particle.size.value <= minValue) {
                particle.size.status = 0;

                if (!particle.size.loops) {
                    particle.size.loops = 0;
                }

                particle.size.loops++;
            } else {
                particle.size.value -= sizeVelocity;
            }

    }

    checkDestroy(particle, particle.size.value, minValue, maxValue);

    if (!particle.destroyed) {
        particle.size.value = clamp(particle.size.value, minValue, maxValue);
    }
}

export var SizeUpdater = /*#__PURE__*/ function() {
    function SizeUpdater() {
        _classCallCheck(this, SizeUpdater);
    }

    _createClass(SizeUpdater, [{
        key: "init",
        value: function init() {}
    }, {
        key: "isEnabled",
        value: function isEnabled(particle) {
            var _a, _b, _c, _d;

            return !particle.destroyed && !particle.spawning && particle.size.enable && (((_a = particle.size.maxLoops) !== null && _a !== void 0 ? _a : 0) <= 0 || ((_b = particle.size.maxLoops) !== null && _b !== void 0 ? _b : 0) > 0 && ((_c = particle.size.loops) !== null && _c !== void 0 ? _c : 0) < ((_d = particle.size.maxLoops) !== null && _d !== void 0 ? _d : 0));
        }
    }, {
        key: "update",
        value: function update(particle, delta) {
            if (!this.isEnabled(particle)) {
                return;
            }

            updateSize(particle, delta);
        }
    }]);

    return SizeUpdater;
}();