import _classCallCheck from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createClass";
import {
    colorToHsl,
    getHslAnimationFromHsl
} from "../../Utils/ColorUtils";
import {
    randomInRange
} from "../../Utils/NumberUtils";

function updateColorValue(delta, value, valueAnimation, max, decrease) {
    var _a;

    var colorValue = value;

    if (!colorValue || !valueAnimation.enable) {
        return;
    }

    var offset = randomInRange(valueAnimation.offset);
    var velocity = ((_a = value.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor + offset * 3.6;

    if (!decrease || colorValue.status === 0) {
        colorValue.value += velocity;

        if (decrease && colorValue.value > max) {
            colorValue.status = 1;
            colorValue.value -= colorValue.value % max;
        }
    } else {
        colorValue.value -= velocity;

        if (colorValue.value < 0) {
            colorValue.status = 0;
            colorValue.value += colorValue.value;
        }
    }

    if (colorValue.value > max) {
        colorValue.value %= max;
    }
}

function updateColor(particle, delta) {
    var _a, _b, _c;

    var animationOptions = particle.options.color.animation;

    if (((_a = particle.color) === null || _a === void 0 ? void 0 : _a.h) !== undefined) {
        updateColorValue(delta, particle.color.h, animationOptions.h, 360, false);
    }

    if (((_b = particle.color) === null || _b === void 0 ? void 0 : _b.s) !== undefined) {
        updateColorValue(delta, particle.color.s, animationOptions.s, 100, true);
    }

    if (((_c = particle.color) === null || _c === void 0 ? void 0 : _c.l) !== undefined) {
        updateColorValue(delta, particle.color.l, animationOptions.l, 100, true);
    }
}

export var ColorUpdater = /*#__PURE__*/ function() {
    function ColorUpdater(container) {
        _classCallCheck(this, ColorUpdater);

        this.container = container;
    }

    _createClass(ColorUpdater, [{
        key: "init",
        value: function init(particle) {
            var hslColor = colorToHsl(particle.options.color, particle.id, particle.options.reduceDuplicates);

            if (hslColor) {
                particle.color = getHslAnimationFromHsl(hslColor, particle.options.color.animation, this.container.retina.reduceFactor);
            }
        }
    }, {
        key: "isEnabled",
        value: function isEnabled(particle) {
            var _a, _b, _c;

            var animationOptions = particle.options.color.animation;
            return !particle.destroyed && !particle.spawning && (((_a = particle.color) === null || _a === void 0 ? void 0 : _a.h.value) !== undefined && animationOptions.h.enable || ((_b = particle.color) === null || _b === void 0 ? void 0 : _b.s.value) !== undefined && animationOptions.s.enable || ((_c = particle.color) === null || _c === void 0 ? void 0 : _c.l.value) !== undefined && animationOptions.l.enable);
        }
    }, {
        key: "update",
        value: function update(particle, delta) {
            updateColor(particle, delta);
        }
    }]);

    return ColorUpdater;
}();