import _asyncToGenerator from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/asyncToGenerator";
import _slicedToArray from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/slicedToArray";
import _createForOfIteratorHelper from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createForOfIteratorHelper";
import _classCallCheck from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createClass";

function _regeneratorRuntime() {
    "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
    _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
    };
    var exports = {},
        Op = Object.prototype,
        hasOwn = Op.hasOwnProperty,
        $Symbol = "function" == typeof Symbol ? Symbol : {},
        iteratorSymbol = $Symbol.iterator || "@@iterator",
        asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
        toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
            value: value,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }), obj[key];
    }
    try {
        define({}, "");
    } catch (err) {
        define = function define(obj, key, value) {
            return obj[key] = value;
        };
    }

    function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function(innerFn, self, context) {
            var state = "suspendedStart";
            return function(method, arg) {
                if ("executing" === state) throw new Error("Generator is already running");
                if ("completed" === state) {
                    if ("throw" === method) throw arg;
                    return doneResult();
                }
                for (context.method = method, context.arg = arg;;) {
                    var delegate = context.delegate;
                    if (delegate) {
                        var delegateResult = maybeInvokeDelegate(delegate, context);
                        if (delegateResult) {
                            if (delegateResult === ContinueSentinel) continue;
                            return delegateResult;
                        }
                    }
                    if ("next" === context.method) context.sent = context._sent = context.arg;
                    else if ("throw" === context.method) {
                        if ("suspendedStart" === state) throw state = "completed", context.arg;
                        context.dispatchException(context.arg);
                    } else "return" === context.method && context.abrupt("return", context.arg);
                    state = "executing";
                    var record = tryCatch(innerFn, self, context);
                    if ("normal" === record.type) {
                        if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                        return {
                            value: record.arg,
                            done: context.done
                        };
                    }
                    "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
                }
            };
        }(innerFn, self, context), generator;
    }

    function tryCatch(fn, obj, arg) {
        try {
            return {
                type: "normal",
                arg: fn.call(obj, arg)
            };
        } catch (err) {
            return {
                type: "throw",
                arg: err
            };
        }
    }
    exports.wrap = wrap;
    var ContinueSentinel = {};

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {}
    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function() {
        return this;
    });
    var getProto = Object.getPrototypeOf,
        NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

    function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function(method) {
            define(prototype, method, function(arg) {
                return this._invoke(method, arg);
            });
        });
    }

    function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
            var record = tryCatch(generator[method], generator, arg);
            if ("throw" !== record.type) {
                var result = record.arg,
                    value = result.value;
                return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function(value) {
                    invoke("next", value, resolve, reject);
                }, function(err) {
                    invoke("throw", err, resolve, reject);
                }) : PromiseImpl.resolve(value).then(function(unwrapped) {
                    result.value = unwrapped, resolve(result);
                }, function(error) {
                    return invoke("throw", error, resolve, reject);
                });
            }
            reject(record.arg);
        }
        var previousPromise;
        this._invoke = function(method, arg) {
            function callInvokeWithMethodAndArg() {
                return new PromiseImpl(function(resolve, reject) {
                    invoke(method, arg, resolve, reject);
                });
            }
            return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
    }

    function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];
        if (undefined === method) {
            if (context.delegate = null, "throw" === context.method) {
                if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
                context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
            }
            return ContinueSentinel;
        }
        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
    }

    function pushTryEntry(locs) {
        var entry = {
            tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
    }

    function Context(tryLocsList) {
        this.tryEntries = [{
            tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
    }

    function values(iterable) {
        if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];
            if (iteratorMethod) return iteratorMethod.call(iterable);
            if ("function" == typeof iterable.next) return iterable;
            if (!isNaN(iterable.length)) {
                var i = -1,
                    next = function next() {
                        for (; ++i < iterable.length;) {
                            if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
                        }
                        return next.value = undefined, next.done = !0, next;
                    };
                return next.next = next;
            }
        }
        return {
            next: doneResult
        };
    }

    function doneResult() {
        return {
            value: undefined,
            done: !0
        };
    }
    return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function(genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
    }, exports.mark = function(genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
    }, exports.awrap = function(arg) {
        return {
            __await: arg
        };
    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
        return this;
    }), exports.AsyncIterator = AsyncIterator, exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
        });
    }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function() {
        return this;
    }), define(Gp, "toString", function() {
        return "[object Generator]";
    }), exports.keys = function(object) {
        var keys = [];
        for (var key in object) {
            keys.push(key);
        }
        return keys.reverse(),
            function next() {
                for (; keys.length;) {
                    var key = keys.pop();
                    if (key in object) return next.value = key, next.done = !1, next;
                }
                return next.done = !0, next;
            };
    }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
            if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset)
                for (var name in this) {
                    "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
                }
        },
        stop: function stop() {
            this.done = !0;
            var rootRecord = this.tryEntries[0].completion;
            if ("throw" === rootRecord.type) throw rootRecord.arg;
            return this.rval;
        },
        dispatchException: function dispatchException(exception) {
            if (this.done) throw exception;
            var context = this;

            function handle(loc, caught) {
                return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
            }
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                var entry = this.tryEntries[i],
                    record = entry.completion;
                if ("root" === entry.tryLoc) return handle("end");
                if (entry.tryLoc <= this.prev) {
                    var hasCatch = hasOwn.call(entry, "catchLoc"),
                        hasFinally = hasOwn.call(entry, "finallyLoc");
                    if (hasCatch && hasFinally) {
                        if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                        if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                    } else if (hasCatch) {
                        if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                    } else {
                        if (!hasFinally) throw new Error("try statement without catch or finally");
                        if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                    }
                }
            }
        },
        abrupt: function abrupt(type, arg) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                var entry = this.tryEntries[i];
                if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                    var finallyEntry = entry;
                    break;
                }
            }
            finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
            var record = finallyEntry ? finallyEntry.completion : {};
            return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
            if ("throw" === record.type) throw record.arg;
            return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                var entry = this.tryEntries[i];
                if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
            }
        },
        catch: function _catch(tryLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                var entry = this.tryEntries[i];
                if (entry.tryLoc === tryLoc) {
                    var record = entry.completion;
                    if ("throw" === record.type) {
                        var thrown = record.arg;
                        resetTryEntry(entry);
                    }
                    return thrown;
                }
            }
            throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
            return this.delegate = {
                iterator: values(iterable),
                resultName: resultName,
                nextLoc: nextLoc
            }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
    }, exports;
}

var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};

var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};

var _Container_engine;

import {
    animate,
    cancelAnimation
} from "../Utils/Utils";
import {
    Canvas
} from "./Canvas";
import {
    EventListeners
} from "./Utils/EventListeners";
import {
    FrameManager
} from "./Utils/FrameManager";
import {
    Options
} from "../Options/Classes/Options";
import {
    Particles
} from "./Particles";
import {
    Retina
} from "./Retina";
import {
    Vector
} from "./Utils/Vector";
import {
    getRangeValue
} from "../Utils/NumberUtils";
export var Container = /*#__PURE__*/ function() {
    function Container(engine, id, sourceOptions) {
        var _this = this;

        _classCallCheck(this, Container);

        this.id = id;

        _Container_engine.set(this, void 0);

        __classPrivateFieldSet(this, _Container_engine, engine, "f");

        this.fpsLimit = 120;
        this.duration = 0;
        this.lifeTime = 0;
        this.firstStart = true;
        this.started = false;
        this.destroyed = false;
        this.paused = true;
        this.lastFrameTime = 0;
        this.zLayers = 100;
        this.pageHidden = false;
        this._sourceOptions = sourceOptions;
        this._initialSourceOptions = sourceOptions;
        this.retina = new Retina(this);
        this.canvas = new Canvas(this);
        this.particles = new Particles(__classPrivateFieldGet(this, _Container_engine, "f"), this);
        this.drawer = new FrameManager(this);

        for (var _len = arguments.length, presets = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
            presets[_key - 3] = arguments[_key];
        }

        this.presets = presets;
        this.pathGenerator = {
            generate: function generate() {
                var v = Vector.create(0, 0);
                v.length = Math.random();
                v.angle = Math.random() * Math.PI * 2;
                return v;
            },
            init: function init() {},
            update: function update() {}
        };
        this.interactivity = {
            mouse: {
                clicking: false,
                inside: false
            }
        };
        this.plugins = new Map();
        this.drawers = new Map();
        this.density = 1;
        this._options = new Options(__classPrivateFieldGet(this, _Container_engine, "f"));
        this.actualOptions = new Options(__classPrivateFieldGet(this, _Container_engine, "f"));
        this.eventListeners = new EventListeners(this);

        if (typeof IntersectionObserver !== "undefined" && IntersectionObserver) {
            this.intersectionObserver = new IntersectionObserver(function(entries) {
                return _this.intersectionManager(entries);
            });
        }
    }

    _createClass(Container, [{
        key: "options",
        get: function get() {
            return this._options;
        }
    }, {
        key: "sourceOptions",
        get: function get() {
            return this._sourceOptions;
        }
    }, {
        key: "play",
        value: function play(force) {
            var needsUpdate = this.paused || force;

            if (this.firstStart && !this.actualOptions.autoPlay) {
                this.firstStart = false;
                return;
            }

            if (this.paused) {
                this.paused = false;
            }

            if (needsUpdate) {
                var _iterator = _createForOfIteratorHelper(this.plugins),
                    _step;

                try {
                    for (_iterator.s(); !(_step = _iterator.n()).done;) {
                        var _step$value = _slicedToArray(_step.value, 2),
                            plugin = _step$value[1];

                        if (plugin.play) {
                            plugin.play();
                        }
                    }
                } catch (err) {
                    _iterator.e(err);
                } finally {
                    _iterator.f();
                }
            }

            this.draw(needsUpdate || false);
        }
    }, {
        key: "pause",
        value: function pause() {
            if (this.drawAnimationFrame !== undefined) {
                cancelAnimation()(this.drawAnimationFrame);
                delete this.drawAnimationFrame;
            }

            if (this.paused) {
                return;
            }

            var _iterator2 = _createForOfIteratorHelper(this.plugins),
                _step2;

            try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                    var _step2$value = _slicedToArray(_step2.value, 2),
                        plugin = _step2$value[1];

                    if (plugin.pause) {
                        plugin.pause();
                    }
                }
            } catch (err) {
                _iterator2.e(err);
            } finally {
                _iterator2.f();
            }

            if (!this.pageHidden) {
                this.paused = true;
            }
        }
    }, {
        key: "draw",
        value: function draw(force) {
            var _this2 = this;

            var refreshTime = force;
            this.drawAnimationFrame = animate()( /*#__PURE__*/ function() {
                var _ref = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime().mark(function _callee(timestamp) {
                    return _regeneratorRuntime().wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (refreshTime) {
                                        _this2.lastFrameTime = undefined;
                                        refreshTime = false;
                                    }

                                    _context.next = 3;
                                    return _this2.drawer.nextFrame(timestamp);

                                case 3:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee);
                }));

                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            }());
        }
    }, {
        key: "getAnimationStatus",
        value: function getAnimationStatus() {
            return !this.paused && !this.pageHidden;
        }
    }, {
        key: "setNoise",
        value: function setNoise(noiseOrGenerator, init, update) {
            this.setPath(noiseOrGenerator, init, update);
        }
    }, {
        key: "setPath",
        value: function setPath(pathOrGenerator, init, update) {
            var _a, _b, _c;

            if (!pathOrGenerator) {
                return;
            }

            if (typeof pathOrGenerator === "function") {
                this.pathGenerator.generate = pathOrGenerator;

                if (init) {
                    this.pathGenerator.init = init;
                }

                if (update) {
                    this.pathGenerator.update = update;
                }
            } else {
                var oldGenerator = this.pathGenerator;
                this.pathGenerator = pathOrGenerator;
                (_a = this.pathGenerator).generate || (_a.generate = oldGenerator.generate);
                (_b = this.pathGenerator).init || (_b.init = oldGenerator.init);
                (_c = this.pathGenerator).update || (_c.update = oldGenerator.update);
            }
        }
    }, {
        key: "destroy",
        value: function destroy() {
            this.stop();
            this.canvas.destroy();

            var _iterator3 = _createForOfIteratorHelper(this.drawers),
                _step3;

            try {
                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                    var _step3$value = _slicedToArray(_step3.value, 2),
                        drawer = _step3$value[1];

                    if (drawer.destroy) {
                        drawer.destroy(this);
                    }
                }
            } catch (err) {
                _iterator3.e(err);
            } finally {
                _iterator3.f();
            }

            var _iterator4 = _createForOfIteratorHelper(this.drawers.keys()),
                _step4;

            try {
                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                    var key = _step4.value;
                    this.drawers.delete(key);
                }
            } catch (err) {
                _iterator4.e(err);
            } finally {
                _iterator4.f();
            }

            this.destroyed = true;
        }
    }, {
        key: "exportImg",
        value: function exportImg(callback) {
            this.exportImage(callback);
        }
    }, {
        key: "exportImage",
        value: function exportImage(callback, type, quality) {
            var _a;

            return (_a = this.canvas.element) === null || _a === void 0 ? void 0 : _a.toBlob(callback, type !== null && type !== void 0 ? type : "image/png", quality);
        }
    }, {
        key: "exportConfiguration",
        value: function exportConfiguration() {
            return JSON.stringify(this.actualOptions, undefined, 2);
        }
    }, {
        key: "refresh",
        value: function refresh() {
            this.stop();
            return this.start();
        }
    }, {
        key: "reset",
        value: function reset() {
            this._options = new Options(__classPrivateFieldGet(this, _Container_engine, "f"));
            return this.refresh();
        }
    }, {
        key: "stop",
        value: function stop() {
            if (!this.started) {
                return;
            }

            this.firstStart = true;
            this.started = false;
            this.eventListeners.removeListeners();
            this.pause();
            this.particles.clear();
            this.canvas.clear();

            if (this.interactivity.element instanceof HTMLElement && this.intersectionObserver) {
                this.intersectionObserver.unobserve(this.interactivity.element);
            }

            var _iterator5 = _createForOfIteratorHelper(this.plugins),
                _step5;

            try {
                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                    var _step5$value = _slicedToArray(_step5.value, 2),
                        plugin = _step5$value[1];

                    if (plugin.stop) {
                        plugin.stop();
                    }
                }
            } catch (err) {
                _iterator5.e(err);
            } finally {
                _iterator5.f();
            }

            var _iterator6 = _createForOfIteratorHelper(this.plugins.keys()),
                _step6;

            try {
                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                    var key = _step6.value;
                    this.plugins.delete(key);
                }
            } catch (err) {
                _iterator6.e(err);
            } finally {
                _iterator6.f();
            }

            this.particles.linksColors = new Map();
            delete this.particles.grabLineColor;
            delete this.particles.linksColor;
            this._sourceOptions = this._options;
        }
    }, {
        key: "loadTheme",
        value: function() {
            var _loadTheme = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime().mark(function _callee2(name) {
                return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                this.currentTheme = name;
                                _context2.next = 3;
                                return this.refresh();

                            case 3:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function loadTheme(_x2) {
                return _loadTheme.apply(this, arguments);
            }

            return loadTheme;
        }()
    }, {
        key: "start",
        value: function() {
            var _start = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime().mark(function _callee3() {
                var _iterator7, _step7, _step7$value, plugin;

                return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                if (!this.started) {
                                    _context3.next = 2;
                                    break;
                                }

                                return _context3.abrupt("return");

                            case 2:
                                _context3.next = 4;
                                return this.init();

                            case 4:
                                this.started = true;
                                this.eventListeners.addListeners();

                                if (this.interactivity.element instanceof HTMLElement && this.intersectionObserver) {
                                    this.intersectionObserver.observe(this.interactivity.element);
                                }

                                _iterator7 = _createForOfIteratorHelper(this.plugins);
                                _context3.prev = 8;

                                _iterator7.s();

                            case 10:
                                if ((_step7 = _iterator7.n()).done) {
                                    _context3.next = 20;
                                    break;
                                }

                                _step7$value = _slicedToArray(_step7.value, 2), plugin = _step7$value[1];

                                if (!(plugin.startAsync !== undefined)) {
                                    _context3.next = 17;
                                    break;
                                }

                                _context3.next = 15;
                                return plugin.startAsync();

                            case 15:
                                _context3.next = 18;
                                break;

                            case 17:
                                if (plugin.start !== undefined) {
                                    plugin.start();
                                }

                            case 18:
                                _context3.next = 10;
                                break;

                            case 20:
                                _context3.next = 25;
                                break;

                            case 22:
                                _context3.prev = 22;
                                _context3.t0 = _context3["catch"](8);

                                _iterator7.e(_context3.t0);

                            case 25:
                                _context3.prev = 25;

                                _iterator7.f();

                                return _context3.finish(25);

                            case 28:
                                this.play();

                            case 29:
                            case "end":
                                return _context3.stop();
                        }
                    }
                }, _callee3, this, [
                    [8, 22, 25, 28]
                ]);
            }));

            function start() {
                return _start.apply(this, arguments);
            }

            return start;
        }()
    }, {
        key: "addClickHandler",
        value: function addClickHandler(callback) {
            var _this3 = this;

            var el = this.interactivity.element;

            if (!el) {
                return;
            }

            var clickOrTouchHandler = function clickOrTouchHandler(e, pos, radius) {
                if (_this3.destroyed) {
                    return;
                }

                var pxRatio = _this3.retina.pixelRatio,
                    posRetina = {
                        x: pos.x * pxRatio,
                        y: pos.y * pxRatio
                    },
                    particles = _this3.particles.quadTree.queryCircle(posRetina, radius * pxRatio);

                callback(e, particles);
            };

            var clickHandler = function clickHandler(e) {
                if (_this3.destroyed) {
                    return;
                }

                var mouseEvent = e,
                    pos = {
                        x: mouseEvent.offsetX || mouseEvent.clientX,
                        y: mouseEvent.offsetY || mouseEvent.clientY
                    };
                clickOrTouchHandler(e, pos, 1);
            };

            var touchStartHandler = function touchStartHandler() {
                if (_this3.destroyed) {
                    return;
                }

                touched = true;
                touchMoved = false;
            };

            var touchMoveHandler = function touchMoveHandler() {
                if (_this3.destroyed) {
                    return;
                }

                touchMoved = true;
            };

            var touchEndHandler = function touchEndHandler(e) {
                var _a, _b, _c;

                if (_this3.destroyed) {
                    return;
                }

                if (touched && !touchMoved) {
                    var touchEvent = e;
                    var lastTouch = touchEvent.touches[touchEvent.touches.length - 1];

                    if (!lastTouch) {
                        lastTouch = touchEvent.changedTouches[touchEvent.changedTouches.length - 1];

                        if (!lastTouch) {
                            return;
                        }
                    }

                    var canvasRect = (_a = _this3.canvas.element) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect(),
                        pos = {
                            x: lastTouch.clientX - ((_b = canvasRect === null || canvasRect === void 0 ? void 0 : canvasRect.left) !== null && _b !== void 0 ? _b : 0),
                            y: lastTouch.clientY - ((_c = canvasRect === null || canvasRect === void 0 ? void 0 : canvasRect.top) !== null && _c !== void 0 ? _c : 0)
                        };
                    clickOrTouchHandler(e, pos, Math.max(lastTouch.radiusX, lastTouch.radiusY));
                }

                touched = false;
                touchMoved = false;
            };

            var touchCancelHandler = function touchCancelHandler() {
                if (_this3.destroyed) {
                    return;
                }

                touched = false;
                touchMoved = false;
            };

            var touched = false;
            var touchMoved = false;
            el.addEventListener("click", clickHandler);
            el.addEventListener("touchstart", touchStartHandler);
            el.addEventListener("touchmove", touchMoveHandler);
            el.addEventListener("touchend", touchEndHandler);
            el.addEventListener("touchcancel", touchCancelHandler);
        }
    }, {
        key: "handleClickMode",
        value: function handleClickMode(mode) {
            this.particles.handleClickMode(mode);

            var _iterator8 = _createForOfIteratorHelper(this.plugins),
                _step8;

            try {
                for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                    var _step8$value = _slicedToArray(_step8.value, 2),
                        plugin = _step8$value[1];

                    if (plugin.handleClickMode) {
                        plugin.handleClickMode(mode);
                    }
                }
            } catch (err) {
                _iterator8.e(err);
            } finally {
                _iterator8.f();
            }
        }
    }, {
        key: "updateActualOptions",
        value: function updateActualOptions() {
            this.actualOptions.responsive = [];
            var newMaxWidth = this.actualOptions.setResponsive(this.canvas.size.width, this.retina.pixelRatio, this._options);
            this.actualOptions.setTheme(this.currentTheme);

            if (this.responsiveMaxWidth != newMaxWidth) {
                this.responsiveMaxWidth = newMaxWidth;
                return true;
            }

            return false;
        }
    }, {
        key: "init",
        value: function() {
            var _init = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime().mark(function _callee4() {
                var _iterator9, _step9, preset, shapes, _iterator10, _step10, type, drawer, availablePlugins, _iterator11, _step11, _step11$value, id, plugin, _iterator12, _step12, _step12$value, _drawer, _iterator13, _step13, _step13$value, _plugin, pathOptions, _iterator14, _step14, _step14$value, _plugin2;

                return _regeneratorRuntime().wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                this._options = new Options(__classPrivateFieldGet(this, _Container_engine, "f"));
                                _iterator9 = _createForOfIteratorHelper(this.presets);

                                try {
                                    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                                        preset = _step9.value;

                                        this._options.load(__classPrivateFieldGet(this, _Container_engine, "f").plugins.getPreset(preset));
                                    }
                                } catch (err) {
                                    _iterator9.e(err);
                                } finally {
                                    _iterator9.f();
                                }

                                shapes = __classPrivateFieldGet(this, _Container_engine, "f").plugins.getSupportedShapes();
                                _iterator10 = _createForOfIteratorHelper(shapes);

                                try {
                                    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
                                        type = _step10.value;
                                        drawer = __classPrivateFieldGet(this, _Container_engine, "f").plugins.getShapeDrawer(type);

                                        if (drawer) {
                                            this.drawers.set(type, drawer);
                                        }
                                    }
                                } catch (err) {
                                    _iterator10.e(err);
                                } finally {
                                    _iterator10.f();
                                }

                                this._options.load(this._initialSourceOptions);

                                this._options.load(this._sourceOptions);

                                this.actualOptions = new Options(__classPrivateFieldGet(this, _Container_engine, "f"));
                                this.actualOptions.load(this._options);
                                this.retina.init();
                                this.canvas.init();
                                this.updateActualOptions();
                                this.canvas.initBackground();
                                this.canvas.resize();
                                this.zLayers = this.actualOptions.zLayers;
                                this.duration = getRangeValue(this.actualOptions.duration);
                                this.lifeTime = 0;
                                this.fpsLimit = this.actualOptions.fpsLimit > 0 ? this.actualOptions.fpsLimit : 120;
                                availablePlugins = __classPrivateFieldGet(this, _Container_engine, "f").plugins.getAvailablePlugins(this);
                                _iterator11 = _createForOfIteratorHelper(availablePlugins);

                                try {
                                    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
                                        _step11$value = _slicedToArray(_step11.value, 2), id = _step11$value[0], plugin = _step11$value[1];
                                        this.plugins.set(id, plugin);
                                    }
                                } catch (err) {
                                    _iterator11.e(err);
                                } finally {
                                    _iterator11.f();
                                }

                                _iterator12 = _createForOfIteratorHelper(this.drawers);
                                _context4.prev = 23;

                                _iterator12.s();

                            case 25:
                                if ((_step12 = _iterator12.n()).done) {
                                    _context4.next = 32;
                                    break;
                                }

                                _step12$value = _slicedToArray(_step12.value, 2), _drawer = _step12$value[1];

                                if (!_drawer.init) {
                                    _context4.next = 30;
                                    break;
                                }

                                _context4.next = 30;
                                return _drawer.init(this);

                            case 30:
                                _context4.next = 25;
                                break;

                            case 32:
                                _context4.next = 37;
                                break;

                            case 34:
                                _context4.prev = 34;
                                _context4.t0 = _context4["catch"](23);

                                _iterator12.e(_context4.t0);

                            case 37:
                                _context4.prev = 37;

                                _iterator12.f();

                                return _context4.finish(37);

                            case 40:
                                _iterator13 = _createForOfIteratorHelper(this.plugins);
                                _context4.prev = 41;

                                _iterator13.s();

                            case 43:
                                if ((_step13 = _iterator13.n()).done) {
                                    _context4.next = 54;
                                    break;
                                }

                                _step13$value = _slicedToArray(_step13.value, 2), _plugin = _step13$value[1];

                                if (!_plugin.init) {
                                    _context4.next = 49;
                                    break;
                                }

                                _plugin.init(this.actualOptions);

                                _context4.next = 52;
                                break;

                            case 49:
                                if (!(_plugin.initAsync !== undefined)) {
                                    _context4.next = 52;
                                    break;
                                }

                                _context4.next = 52;
                                return _plugin.initAsync(this.actualOptions);

                            case 52:
                                _context4.next = 43;
                                break;

                            case 54:
                                _context4.next = 59;
                                break;

                            case 56:
                                _context4.prev = 56;
                                _context4.t1 = _context4["catch"](41);

                                _iterator13.e(_context4.t1);

                            case 59:
                                _context4.prev = 59;

                                _iterator13.f();

                                return _context4.finish(59);

                            case 62:
                                pathOptions = this.actualOptions.particles.move.path;

                                if (pathOptions.generator) {
                                    this.setPath(__classPrivateFieldGet(this, _Container_engine, "f").plugins.getPathGenerator(pathOptions.generator));
                                }

                                this.particles.init();
                                this.particles.setDensity();
                                _iterator14 = _createForOfIteratorHelper(this.plugins);

                                try {
                                    for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
                                        _step14$value = _slicedToArray(_step14.value, 2), _plugin2 = _step14$value[1];

                                        if (_plugin2.particlesSetup !== undefined) {
                                            _plugin2.particlesSetup();
                                        }
                                    }
                                } catch (err) {
                                    _iterator14.e(err);
                                } finally {
                                    _iterator14.f();
                                }

                            case 68:
                            case "end":
                                return _context4.stop();
                        }
                    }
                }, _callee4, this, [
                    [23, 34, 37, 40],
                    [41, 56, 59, 62]
                ]);
            }));

            function init() {
                return _init.apply(this, arguments);
            }

            return init;
        }()
    }, {
        key: "intersectionManager",
        value: function intersectionManager(entries) {
            if (!this.actualOptions.pauseOnOutsideViewport) {
                return;
            }

            var _iterator15 = _createForOfIteratorHelper(entries),
                _step15;

            try {
                for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
                    var entry = _step15.value;

                    if (entry.target !== this.interactivity.element) {
                        continue;
                    }

                    if (entry.isIntersecting) {
                        this.play();
                    } else {
                        this.pause();
                    }
                }
            } catch (err) {
                _iterator15.e(err);
            } finally {
                _iterator15.f();
            }
        }
    }]);

    return Container;
}();
_Container_engine = new WeakMap();