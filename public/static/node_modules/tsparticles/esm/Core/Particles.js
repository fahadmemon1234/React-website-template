import _asyncToGenerator from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/asyncToGenerator";
import _slicedToArray from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/slicedToArray";
import _createForOfIteratorHelper from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createForOfIteratorHelper";
import _classCallCheck from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createClass";

function _regeneratorRuntime() {
    "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
    _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
    };
    var exports = {},
        Op = Object.prototype,
        hasOwn = Op.hasOwnProperty,
        $Symbol = "function" == typeof Symbol ? Symbol : {},
        iteratorSymbol = $Symbol.iterator || "@@iterator",
        asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
        toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
            value: value,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }), obj[key];
    }
    try {
        define({}, "");
    } catch (err) {
        define = function define(obj, key, value) {
            return obj[key] = value;
        };
    }

    function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function(innerFn, self, context) {
            var state = "suspendedStart";
            return function(method, arg) {
                if ("executing" === state) throw new Error("Generator is already running");
                if ("completed" === state) {
                    if ("throw" === method) throw arg;
                    return doneResult();
                }
                for (context.method = method, context.arg = arg;;) {
                    var delegate = context.delegate;
                    if (delegate) {
                        var delegateResult = maybeInvokeDelegate(delegate, context);
                        if (delegateResult) {
                            if (delegateResult === ContinueSentinel) continue;
                            return delegateResult;
                        }
                    }
                    if ("next" === context.method) context.sent = context._sent = context.arg;
                    else if ("throw" === context.method) {
                        if ("suspendedStart" === state) throw state = "completed", context.arg;
                        context.dispatchException(context.arg);
                    } else "return" === context.method && context.abrupt("return", context.arg);
                    state = "executing";
                    var record = tryCatch(innerFn, self, context);
                    if ("normal" === record.type) {
                        if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                        return {
                            value: record.arg,
                            done: context.done
                        };
                    }
                    "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
                }
            };
        }(innerFn, self, context), generator;
    }

    function tryCatch(fn, obj, arg) {
        try {
            return {
                type: "normal",
                arg: fn.call(obj, arg)
            };
        } catch (err) {
            return {
                type: "throw",
                arg: err
            };
        }
    }
    exports.wrap = wrap;
    var ContinueSentinel = {};

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {}
    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function() {
        return this;
    });
    var getProto = Object.getPrototypeOf,
        NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

    function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function(method) {
            define(prototype, method, function(arg) {
                return this._invoke(method, arg);
            });
        });
    }

    function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
            var record = tryCatch(generator[method], generator, arg);
            if ("throw" !== record.type) {
                var result = record.arg,
                    value = result.value;
                return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function(value) {
                    invoke("next", value, resolve, reject);
                }, function(err) {
                    invoke("throw", err, resolve, reject);
                }) : PromiseImpl.resolve(value).then(function(unwrapped) {
                    result.value = unwrapped, resolve(result);
                }, function(error) {
                    return invoke("throw", error, resolve, reject);
                });
            }
            reject(record.arg);
        }
        var previousPromise;
        this._invoke = function(method, arg) {
            function callInvokeWithMethodAndArg() {
                return new PromiseImpl(function(resolve, reject) {
                    invoke(method, arg, resolve, reject);
                });
            }
            return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
    }

    function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];
        if (undefined === method) {
            if (context.delegate = null, "throw" === context.method) {
                if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
                context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
            }
            return ContinueSentinel;
        }
        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
    }

    function pushTryEntry(locs) {
        var entry = {
            tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
    }

    function Context(tryLocsList) {
        this.tryEntries = [{
            tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
    }

    function values(iterable) {
        if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];
            if (iteratorMethod) return iteratorMethod.call(iterable);
            if ("function" == typeof iterable.next) return iterable;
            if (!isNaN(iterable.length)) {
                var i = -1,
                    next = function next() {
                        for (; ++i < iterable.length;) {
                            if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
                        }
                        return next.value = undefined, next.done = !0, next;
                    };
                return next.next = next;
            }
        }
        return {
            next: doneResult
        };
    }

    function doneResult() {
        return {
            value: undefined,
            done: !0
        };
    }
    return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function(genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
    }, exports.mark = function(genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
    }, exports.awrap = function(arg) {
        return {
            __await: arg
        };
    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
        return this;
    }), exports.AsyncIterator = AsyncIterator, exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
        });
    }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function() {
        return this;
    }), define(Gp, "toString", function() {
        return "[object Generator]";
    }), exports.keys = function(object) {
        var keys = [];
        for (var key in object) {
            keys.push(key);
        }
        return keys.reverse(),
            function next() {
                for (; keys.length;) {
                    var key = keys.pop();
                    if (key in object) return next.value = key, next.done = !1, next;
                }
                return next.done = !0, next;
            };
    }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
            if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset)
                for (var name in this) {
                    "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
                }
        },
        stop: function stop() {
            this.done = !0;
            var rootRecord = this.tryEntries[0].completion;
            if ("throw" === rootRecord.type) throw rootRecord.arg;
            return this.rval;
        },
        dispatchException: function dispatchException(exception) {
            if (this.done) throw exception;
            var context = this;

            function handle(loc, caught) {
                return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
            }
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                var entry = this.tryEntries[i],
                    record = entry.completion;
                if ("root" === entry.tryLoc) return handle("end");
                if (entry.tryLoc <= this.prev) {
                    var hasCatch = hasOwn.call(entry, "catchLoc"),
                        hasFinally = hasOwn.call(entry, "finallyLoc");
                    if (hasCatch && hasFinally) {
                        if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                        if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                    } else if (hasCatch) {
                        if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                    } else {
                        if (!hasFinally) throw new Error("try statement without catch or finally");
                        if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                    }
                }
            }
        },
        abrupt: function abrupt(type, arg) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                var entry = this.tryEntries[i];
                if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                    var finallyEntry = entry;
                    break;
                }
            }
            finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
            var record = finallyEntry ? finallyEntry.completion : {};
            return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
            if ("throw" === record.type) throw record.arg;
            return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                var entry = this.tryEntries[i];
                if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
            }
        },
        catch: function _catch(tryLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                var entry = this.tryEntries[i];
                if (entry.tryLoc === tryLoc) {
                    var record = entry.completion;
                    if ("throw" === record.type) {
                        var thrown = record.arg;
                        resetTryEntry(entry);
                    }
                    return thrown;
                }
            }
            throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
            return this.delegate = {
                iterator: values(iterable),
                resultName: resultName,
                nextLoc: nextLoc
            }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
    }, exports;
}

var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};

var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};

var _Particles_engine;

import {
    calcPositionFromSize,
    getRangeMax,
    getRangeMin,
    getRangeValue,
    randomInRange,
    setRangeValue
} from "../Utils/NumberUtils";
import {
    InteractionManager
} from "./Utils/InteractionManager";
import {
    Particle
} from "./Particle";
import {
    ParticlesOptions
} from "../Options/Classes/Particles/ParticlesOptions";
import {
    Point
} from "./Utils/Point";
import {
    QuadTree
} from "./Utils/QuadTree";
import {
    Rectangle
} from "./Utils/Rectangle";
export var Particles = /*#__PURE__*/ function() {
    function Particles(engine, container) {
        _classCallCheck(this, Particles);

        this.container = container;

        _Particles_engine.set(this, void 0);

        __classPrivateFieldSet(this, _Particles_engine, engine, "f");

        this.nextId = 0;
        this.array = [];
        this.zArray = [];
        this.limit = 0;
        this.needsSort = false;
        this.lastZIndex = 0;
        this.freqs = {
            links: new Map(),
            triangles: new Map()
        };
        this.interactionManager = new InteractionManager(__classPrivateFieldGet(this, _Particles_engine, "f"), container);
        var canvasSize = this.container.canvas.size;
        this.linksColors = new Map();
        this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);
        this.movers = __classPrivateFieldGet(this, _Particles_engine, "f").plugins.getMovers(container, true);
        this.updaters = __classPrivateFieldGet(this, _Particles_engine, "f").plugins.getUpdaters(container, true);
    }

    _createClass(Particles, [{
        key: "count",
        get: function get() {
            return this.array.length;
        }
    }, {
        key: "init",
        value: function init() {
            var _a;

            var container = this.container,
                options = container.actualOptions;
            this.lastZIndex = 0;
            this.needsSort = false;
            this.freqs.links = new Map();
            this.freqs.triangles = new Map();
            var handled = false;
            this.updaters = __classPrivateFieldGet(this, _Particles_engine, "f").plugins.getUpdaters(container, true);
            this.interactionManager.init();

            var _iterator = _createForOfIteratorHelper(container.plugins),
                _step;

            try {
                for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    var _step$value = _slicedToArray(_step.value, 2),
                        plugin = _step$value[1];

                    if (plugin.particlesInitialization !== undefined) {
                        handled = plugin.particlesInitialization();
                    }

                    if (handled) {
                        break;
                    }
                }
            } catch (err) {
                _iterator.e(err);
            } finally {
                _iterator.f();
            }

            this.addManualParticles();

            if (!handled) {
                for (var group in options.particles.groups) {
                    var groupOptions = options.particles.groups[group];

                    for (var i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {
                        this.addParticle(undefined, groupOptions, group);
                    }
                }

                for (var _i = this.count; _i < options.particles.number.value; _i++) {
                    this.addParticle();
                }
            }

            container.pathGenerator.init(container);
        }
    }, {
        key: "redraw",
        value: function() {
            var _redraw = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime().mark(function _callee() {
                return _regeneratorRuntime().wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                this.clear();
                                this.init();
                                _context.next = 4;
                                return this.draw({
                                    value: 0,
                                    factor: 0
                                });

                            case 4:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function redraw() {
                return _redraw.apply(this, arguments);
            }

            return redraw;
        }()
    }, {
        key: "removeAt",
        value: function removeAt(index) {
            var quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
            var group = arguments.length > 2 ? arguments[2] : undefined;
            var override = arguments.length > 3 ? arguments[3] : undefined;

            if (!(index >= 0 && index <= this.count)) {
                return;
            }

            var deleted = 0;

            for (var i = index; deleted < quantity && i < this.count; i++) {
                var particle = this.array[i];

                if (!particle || particle.group !== group) {
                    continue;
                }

                particle.destroy(override);
                this.array.splice(i--, 1);
                var zIdx = this.zArray.indexOf(particle);
                this.zArray.splice(zIdx, 1);
                deleted++;
            }
        }
    }, {
        key: "remove",
        value: function remove(particle, group, override) {
            this.removeAt(this.array.indexOf(particle), undefined, group, override);
        }
    }, {
        key: "update",
        value: function() {
            var _update = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime().mark(function _callee2(delta) {
                var container, particlesToDelete, _iterator2, _step2, _step2$value, plugin, _iterator3, _step3, _particle, resizeFactor, _iterator5, _step5, _step5$value, _plugin, _iterator6, _step6, mover, _i2, _particlesToDelete, particle, _iterator4, _step4, _particle2, _iterator7, _step7, updater;

                return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                container = this.container, particlesToDelete = [];
                                container.pathGenerator.update();
                                _iterator2 = _createForOfIteratorHelper(container.plugins);

                                try {
                                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                                        _step2$value = _slicedToArray(_step2.value, 2), plugin = _step2$value[1];

                                        if (plugin.update !== undefined) {
                                            plugin.update(delta);
                                        }
                                    }
                                } catch (err) {
                                    _iterator2.e(err);
                                } finally {
                                    _iterator2.f();
                                }

                                _iterator3 = _createForOfIteratorHelper(this.array);
                                _context2.prev = 5;

                                _iterator3.s();

                            case 7:
                                if ((_step3 = _iterator3.n()).done) {
                                    _context2.next = 39;
                                    break;
                                }

                                _particle = _step3.value;
                                resizeFactor = container.canvas.resizeFactor;

                                if (resizeFactor && !_particle.ignoresResizeRatio) {
                                    _particle.position.x *= resizeFactor.width;
                                    _particle.position.y *= resizeFactor.height;
                                }

                                _particle.ignoresResizeRatio = false;
                                _particle.bubble.inRange = false;
                                _iterator5 = _createForOfIteratorHelper(this.container.plugins);
                                _context2.prev = 14;

                                _iterator5.s();

                            case 16:
                                if ((_step5 = _iterator5.n()).done) {
                                    _context2.next = 23;
                                    break;
                                }

                                _step5$value = _slicedToArray(_step5.value, 2), _plugin = _step5$value[1];

                                if (!_particle.destroyed) {
                                    _context2.next = 20;
                                    break;
                                }

                                return _context2.abrupt("break", 23);

                            case 20:
                                if (_plugin.particleUpdate) {
                                    _plugin.particleUpdate(_particle, delta);
                                }

                            case 21:
                                _context2.next = 16;
                                break;

                            case 23:
                                _context2.next = 28;
                                break;

                            case 25:
                                _context2.prev = 25;
                                _context2.t0 = _context2["catch"](14);

                                _iterator5.e(_context2.t0);

                            case 28:
                                _context2.prev = 28;

                                _iterator5.f();

                                return _context2.finish(28);

                            case 31:
                                _iterator6 = _createForOfIteratorHelper(this.movers);

                                try {
                                    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                                        mover = _step6.value;

                                        if (mover.isEnabled(_particle)) {
                                            mover.move(_particle, delta);
                                        }
                                    }
                                } catch (err) {
                                    _iterator6.e(err);
                                } finally {
                                    _iterator6.f();
                                }

                                if (!_particle.destroyed) {
                                    _context2.next = 36;
                                    break;
                                }

                                particlesToDelete.push(_particle);
                                return _context2.abrupt("continue", 37);

                            case 36:
                                this.quadTree.insert(new Point(_particle.getPosition(), _particle));

                            case 37:
                                _context2.next = 7;
                                break;

                            case 39:
                                _context2.next = 44;
                                break;

                            case 41:
                                _context2.prev = 41;
                                _context2.t1 = _context2["catch"](5);

                                _iterator3.e(_context2.t1);

                            case 44:
                                _context2.prev = 44;

                                _iterator3.f();

                                return _context2.finish(44);

                            case 47:
                                for (_i2 = 0, _particlesToDelete = particlesToDelete; _i2 < _particlesToDelete.length; _i2++) {
                                    particle = _particlesToDelete[_i2];
                                    this.remove(particle);
                                }

                                _context2.next = 50;
                                return this.interactionManager.externalInteract(delta);

                            case 50:
                                _iterator4 = _createForOfIteratorHelper(container.particles.array);
                                _context2.prev = 51;

                                _iterator4.s();

                            case 53:
                                if ((_step4 = _iterator4.n()).done) {
                                    _context2.next = 62;
                                    break;
                                }

                                _particle2 = _step4.value;
                                _iterator7 = _createForOfIteratorHelper(this.updaters);

                                try {
                                    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                                        updater = _step7.value;
                                        updater.update(_particle2, delta);
                                    }
                                } catch (err) {
                                    _iterator7.e(err);
                                } finally {
                                    _iterator7.f();
                                }

                                if (!(!_particle2.destroyed && !_particle2.spawning)) {
                                    _context2.next = 60;
                                    break;
                                }

                                _context2.next = 60;
                                return this.interactionManager.particlesInteract(_particle2, delta);

                            case 60:
                                _context2.next = 53;
                                break;

                            case 62:
                                _context2.next = 67;
                                break;

                            case 64:
                                _context2.prev = 64;
                                _context2.t2 = _context2["catch"](51);

                                _iterator4.e(_context2.t2);

                            case 67:
                                _context2.prev = 67;

                                _iterator4.f();

                                return _context2.finish(67);

                            case 70:
                                delete container.canvas.resizeFactor;

                            case 71:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this, [
                    [5, 41, 44, 47],
                    [14, 25, 28, 31],
                    [51, 64, 67, 70]
                ]);
            }));

            function update(_x) {
                return _update.apply(this, arguments);
            }

            return update;
        }()
    }, {
        key: "draw",
        value: function() {
            var _draw = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime().mark(function _callee3(delta) {
                var container, canvasSize, _iterator8, _step8, _step8$value, plugin, _iterator9, _step9, p;

                return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                container = this.container, canvasSize = this.container.canvas.size;
                                this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);
                                container.canvas.clear();
                                _context3.next = 5;
                                return this.update(delta);

                            case 5:
                                if (this.needsSort) {
                                    this.zArray.sort(function(a, b) {
                                        return b.position.z - a.position.z || a.id - b.id;
                                    });
                                    this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;
                                    this.needsSort = false;
                                }

                                _iterator8 = _createForOfIteratorHelper(container.plugins);

                                try {
                                    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                                        _step8$value = _slicedToArray(_step8.value, 2), plugin = _step8$value[1];
                                        container.canvas.drawPlugin(plugin, delta);
                                    }
                                } catch (err) {
                                    _iterator8.e(err);
                                } finally {
                                    _iterator8.f();
                                }

                                _iterator9 = _createForOfIteratorHelper(this.zArray);

                                try {
                                    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                                        p = _step9.value;
                                        p.draw(delta);
                                    }
                                } catch (err) {
                                    _iterator9.e(err);
                                } finally {
                                    _iterator9.f();
                                }

                            case 10:
                            case "end":
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function draw(_x2) {
                return _draw.apply(this, arguments);
            }

            return draw;
        }()
    }, {
        key: "clear",
        value: function clear() {
            this.array = [];
            this.zArray = [];
        }
    }, {
        key: "push",
        value: function push(nb, mouse, overrideOptions, group) {
            this.pushing = true;

            for (var i = 0; i < nb; i++) {
                this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);
            }

            this.pushing = false;
        }
    }, {
        key: "addParticle",
        value: function addParticle(position, overrideOptions, group) {
            var container = this.container,
                options = container.actualOptions,
                limit = options.particles.number.limit * container.density;

            if (limit > 0) {
                var countToRemove = this.count + 1 - limit;

                if (countToRemove > 0) {
                    this.removeQuantity(countToRemove);
                }
            }

            return this.pushParticle(position, overrideOptions, group);
        }
    }, {
        key: "addSplitParticle",
        value: function addSplitParticle(parent) {
            var splitOptions = parent.options.destroy.split,
                options = new ParticlesOptions();
            options.load(parent.options);
            var factor = getRangeValue(splitOptions.factor.value);
            options.color.load({
                value: {
                    hsl: parent.getFillColor()
                }
            });

            if (typeof options.size.value === "number") {
                options.size.value /= factor;
            } else {
                options.size.value.min /= factor;
                options.size.value.max /= factor;
            }

            options.load(splitOptions.particles);
            var offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : 0,
                position = {
                    x: parent.position.x + randomInRange(offset),
                    y: parent.position.y + randomInRange(offset)
                };
            return this.pushParticle(position, options, parent.group, function(particle) {
                if (particle.size.value < 0.5) {
                    return false;
                }

                particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));
                particle.splitCount = parent.splitCount + 1;
                particle.unbreakable = true;
                setTimeout(function() {
                    particle.unbreakable = false;
                }, 500);
                return true;
            });
        }
    }, {
        key: "removeQuantity",
        value: function removeQuantity(quantity, group) {
            this.removeAt(0, quantity, group);
        }
    }, {
        key: "getLinkFrequency",
        value: function getLinkFrequency(p1, p2) {
            var range = setRangeValue(p1.id, p2.id),
                key = "".concat(getRangeMin(range), "_").concat(getRangeMax(range));
            var res = this.freqs.links.get(key);

            if (res === undefined) {
                res = Math.random();
                this.freqs.links.set(key, res);
            }

            return res;
        }
    }, {
        key: "getTriangleFrequency",
        value: function getTriangleFrequency(p1, p2, p3) {
            var _ref = [p1.id, p2.id, p3.id],
                id1 = _ref[0],
                id2 = _ref[1],
                id3 = _ref[2];

            if (id1 > id2) {
                var _ref2 = [id1, id2];
                id2 = _ref2[0];
                id1 = _ref2[1];
            }

            if (id2 > id3) {
                var _ref3 = [id2, id3];
                id3 = _ref3[0];
                id2 = _ref3[1];
            }

            if (id1 > id3) {
                var _ref4 = [id1, id3];
                id3 = _ref4[0];
                id1 = _ref4[1];
            }

            var key = "".concat(id1, "_").concat(id2, "_").concat(id3);
            var res = this.freqs.triangles.get(key);

            if (res === undefined) {
                res = Math.random();
                this.freqs.triangles.set(key, res);
            }

            return res;
        }
    }, {
        key: "addManualParticles",
        value: function addManualParticles() {
            var container = this.container,
                options = container.actualOptions;

            var _iterator10 = _createForOfIteratorHelper(options.manualParticles),
                _step10;

            try {
                for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
                    var particle = _step10.value;
                    this.addParticle(calcPositionFromSize({
                        size: container.canvas.size,
                        position: particle.position
                    }), particle.options);
                }
            } catch (err) {
                _iterator10.e(err);
            } finally {
                _iterator10.f();
            }
        }
    }, {
        key: "setDensity",
        value: function setDensity() {
            var options = this.container.actualOptions;

            for (var group in options.particles.groups) {
                this.applyDensity(options.particles.groups[group], 0, group);
            }

            this.applyDensity(options.particles, options.manualParticles.length);
        }
    }, {
        key: "handleClickMode",
        value: function handleClickMode(mode) {
            this.interactionManager.handleClickMode(mode);
        }
    }, {
        key: "applyDensity",
        value: function applyDensity(options, manualCount, group) {
            var _a;

            if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {
                return;
            }

            var numberOptions = options.number,
                densityFactor = this.initDensityFactor(numberOptions.density),
                optParticlesNumber = numberOptions.value,
                optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber,
                particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount,
                particlesCount = Math.min(this.count, this.array.filter(function(t) {
                    return t.group === group;
                }).length);
            this.limit = numberOptions.limit * densityFactor;

            if (particlesCount < particlesNumber) {
                this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);
            } else if (particlesCount > particlesNumber) {
                this.removeQuantity(particlesCount - particlesNumber, group);
            }
        }
    }, {
        key: "initDensityFactor",
        value: function initDensityFactor(densityOptions) {
            var container = this.container;

            if (!container.canvas.element || !densityOptions.enable) {
                return 1;
            }

            var canvas = container.canvas.element,
                pxRatio = container.retina.pixelRatio;
            return canvas.width * canvas.height / (densityOptions.factor * Math.pow(pxRatio, 2) * densityOptions.area);
        }
    }, {
        key: "pushParticle",
        value: function pushParticle(position, overrideOptions, group, initializer) {
            try {
                var particle = new Particle(__classPrivateFieldGet(this, _Particles_engine, "f"), this.nextId, this.container, position, overrideOptions, group);
                var canAdd = true;

                if (initializer) {
                    canAdd = initializer(particle);
                }

                if (!canAdd) {
                    return;
                }

                this.array.push(particle);
                this.zArray.push(particle);
                this.nextId++;
                return particle;
            } catch (e) {
                console.warn("error adding particle: ".concat(e));
                return;
            }
        }
    }]);

    return Particles;
}();
_Particles_engine = new WeakMap();