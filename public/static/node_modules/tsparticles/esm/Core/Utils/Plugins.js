import _toConsumableArray from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/toConsumableArray";
import _createForOfIteratorHelper from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createForOfIteratorHelper";
import _classCallCheck from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createClass";

var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};

var _Plugins_engine;

export var Plugins = /*#__PURE__*/ function() {
    function Plugins(engine) {
        _classCallCheck(this, Plugins);

        _Plugins_engine.set(this, void 0);

        __classPrivateFieldSet(this, _Plugins_engine, engine, "f");

        this.plugins = [];
        this.interactorsInitializers = new Map();
        this.moversInitializers = new Map();
        this.updatersInitializers = new Map();
        this.interactors = new Map();
        this.movers = new Map();
        this.updaters = new Map();
        this.presets = new Map();
        this.drawers = new Map();
        this.pathGenerators = new Map();
    }

    _createClass(Plugins, [{
        key: "getPlugin",
        value: function getPlugin(plugin) {
            return this.plugins.find(function(t) {
                return t.id === plugin;
            });
        }
    }, {
        key: "addPlugin",
        value: function addPlugin(plugin) {
            if (!this.getPlugin(plugin.id)) {
                this.plugins.push(plugin);
            }
        }
    }, {
        key: "getAvailablePlugins",
        value: function getAvailablePlugins(container) {
            var res = new Map();

            var _iterator = _createForOfIteratorHelper(this.plugins),
                _step;

            try {
                for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    var plugin = _step.value;

                    if (!plugin.needsPlugin(container.actualOptions)) {
                        continue;
                    }

                    res.set(plugin.id, plugin.getPlugin(container));
                }
            } catch (err) {
                _iterator.e(err);
            } finally {
                _iterator.f();
            }

            return res;
        }
    }, {
        key: "loadOptions",
        value: function loadOptions(options, sourceOptions) {
            var _iterator2 = _createForOfIteratorHelper(this.plugins),
                _step2;

            try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                    var plugin = _step2.value;
                    plugin.loadOptions(options, sourceOptions);
                }
            } catch (err) {
                _iterator2.e(err);
            } finally {
                _iterator2.f();
            }
        }
    }, {
        key: "getPreset",
        value: function getPreset(preset) {
            return this.presets.get(preset);
        }
    }, {
        key: "addPreset",
        value: function addPreset(presetKey, options) {
            var override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            if (override || !this.getPreset(presetKey)) {
                this.presets.set(presetKey, options);
            }
        }
    }, {
        key: "getShapeDrawer",
        value: function getShapeDrawer(type) {
            return this.drawers.get(type);
        }
    }, {
        key: "addShapeDrawer",
        value: function addShapeDrawer(type, drawer) {
            if (!this.getShapeDrawer(type)) {
                this.drawers.set(type, drawer);
            }
        }
    }, {
        key: "getSupportedShapes",
        value: function getSupportedShapes() {
            return this.drawers.keys();
        }
    }, {
        key: "getPathGenerator",
        value: function getPathGenerator(type) {
            return this.pathGenerators.get(type);
        }
    }, {
        key: "addPathGenerator",
        value: function addPathGenerator(type, pathGenerator) {
            if (!this.getPathGenerator(type)) {
                this.pathGenerators.set(type, pathGenerator);
            }
        }
    }, {
        key: "getInteractors",
        value: function getInteractors(container) {
            var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var res = this.interactors.get(container);

            if (!res || force) {
                res = _toConsumableArray(this.interactorsInitializers.values()).map(function(t) {
                    return t(container);
                });
                this.interactors.set(container, res);
            }

            return res;
        }
    }, {
        key: "addInteractor",
        value: function addInteractor(name, initInteractor) {
            this.interactorsInitializers.set(name, initInteractor);
        }
    }, {
        key: "getUpdaters",
        value: function getUpdaters(container) {
            var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var res = this.updaters.get(container);

            if (!res || force) {
                res = _toConsumableArray(this.updatersInitializers.values()).map(function(t) {
                    return t(container);
                });
                this.updaters.set(container, res);
            }

            return res;
        }
    }, {
        key: "addParticleUpdater",
        value: function addParticleUpdater(name, initUpdater) {
            this.updatersInitializers.set(name, initUpdater);
        }
    }, {
        key: "getMovers",
        value: function getMovers(container) {
            var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var res = this.movers.get(container);

            if (!res || force) {
                res = _toConsumableArray(this.moversInitializers.values()).map(function(t) {
                    return t(container);
                });
                this.movers.set(container, res);
            }

            return res;
        }
    }, {
        key: "addParticleMover",
        value: function addParticleMover(name, initMover) {
            this.moversInitializers.set(name, initMover);
        }
    }]);

    return Plugins;
}();
_Plugins_engine = new WeakMap();