import _classCallCheck from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createClass";
import _inherits from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/inherits";
import _createSuper from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createSuper";
import {
    Range
} from "./Range";
export var Rectangle = /*#__PURE__*/ function(_Range) {
    _inherits(Rectangle, _Range);

    var _super = _createSuper(Rectangle);

    function Rectangle(x, y, width, height) {
        var _this;

        _classCallCheck(this, Rectangle);

        _this = _super.call(this, x, y);
        _this.size = {
            height: height,
            width: width
        };
        return _this;
    }

    _createClass(Rectangle, [{
        key: "contains",
        value: function contains(point) {
            var w = this.size.width,
                h = this.size.height,
                pos = this.position;
            return point.x >= pos.x && point.x <= pos.x + w && point.y >= pos.y && point.y <= pos.y + h;
        }
    }, {
        key: "intersects",
        value: function intersects(range) {
            var rect = range,
                circle = range,
                w = this.size.width,
                h = this.size.height,
                pos1 = this.position,
                pos2 = range.position;

            if (circle.radius !== undefined) {
                return circle.intersects(this);
            }

            if (!rect.size) {
                return false;
            }

            var size2 = rect.size,
                w2 = size2.width,
                h2 = size2.height;
            return pos2.x < pos1.x + w && pos2.x + w2 > pos1.x && pos2.y < pos1.y + h && pos2.y + h2 > pos1.y;
        }
    }]);

    return Rectangle;
}(Range);