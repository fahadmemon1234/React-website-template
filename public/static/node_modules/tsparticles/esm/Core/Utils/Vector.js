import _classCallCheck from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createClass";
export var Vector = /*#__PURE__*/ function() {
    function Vector(xOrCoords, y) {
        _classCallCheck(this, Vector);

        if (typeof xOrCoords !== "number" && xOrCoords) {
            this.x = xOrCoords.x;
            this.y = xOrCoords.y;
        } else if (xOrCoords !== undefined && y !== undefined) {
            this.x = xOrCoords;
            this.y = y;
        } else {
            throw new Error("tsParticles - Vector not initialized correctly");
        }
    }

    _createClass(Vector, [{
        key: "angle",
        get: function get() {
            return Math.atan2(this.y, this.x);
        },
        set: function set(angle) {
            this.updateFromAngle(angle, this.length);
        }
    }, {
        key: "length",
        get: function get() {
            return Math.sqrt(this.getLengthSq());
        },
        set: function set(length) {
            this.updateFromAngle(this.angle, length);
        }
    }, {
        key: "add",
        value: function add(v) {
            return Vector.create(this.x + v.x, this.y + v.y);
        }
    }, {
        key: "addTo",
        value: function addTo(v) {
            this.x += v.x;
            this.y += v.y;
        }
    }, {
        key: "sub",
        value: function sub(v) {
            return Vector.create(this.x - v.x, this.y - v.y);
        }
    }, {
        key: "subFrom",
        value: function subFrom(v) {
            this.x -= v.x;
            this.y -= v.y;
        }
    }, {
        key: "mult",
        value: function mult(n) {
            return Vector.create(this.x * n, this.y * n);
        }
    }, {
        key: "multTo",
        value: function multTo(n) {
            this.x *= n;
            this.y *= n;
        }
    }, {
        key: "div",
        value: function div(n) {
            return Vector.create(this.x / n, this.y / n);
        }
    }, {
        key: "divTo",
        value: function divTo(n) {
            this.x /= n;
            this.y /= n;
        }
    }, {
        key: "distanceTo",
        value: function distanceTo(v) {
            return this.sub(v).length;
        }
    }, {
        key: "getLengthSq",
        value: function getLengthSq() {
            return Math.pow(this.x, 2) + Math.pow(this.y, 2);
        }
    }, {
        key: "distanceToSq",
        value: function distanceToSq(v) {
            return this.sub(v).getLengthSq();
        }
    }, {
        key: "manhattanDistanceTo",
        value: function manhattanDistanceTo(v) {
            return Math.abs(v.x - this.x) + Math.abs(v.y - this.y);
        }
    }, {
        key: "copy",
        value: function copy() {
            return Vector.clone(this);
        }
    }, {
        key: "setTo",
        value: function setTo(v) {
            this.x = v.x;
            this.y = v.y;
        }
    }, {
        key: "rotate",
        value: function rotate(angle) {
            return Vector.create(this.x * Math.cos(angle) - this.y * Math.sin(angle), this.x * Math.sin(angle) + this.y * Math.cos(angle));
        }
    }, {
        key: "updateFromAngle",
        value: function updateFromAngle(angle, length) {
            this.x = Math.cos(angle) * length;
            this.y = Math.sin(angle) * length;
        }
    }], [{
        key: "clone",
        value: function clone(source) {
            return Vector.create(source.x, source.y);
        }
    }, {
        key: "create",
        value: function create(x, y) {
            return new Vector(x, y);
        }
    }, {
        key: "origin",
        get: function get() {
            return Vector.create(0, 0);
        }
    }]);

    return Vector;
}();