import _classCallCheck from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createClass";
import _get from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/get";
import _getPrototypeOf from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/getPrototypeOf";
import _inherits from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/inherits";
import _createSuper from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createSuper";
import {
    Vector
} from "./Vector";
export var Vector3d = /*#__PURE__*/ function(_Vector) {
    _inherits(Vector3d, _Vector);

    var _super = _createSuper(Vector3d);

    function Vector3d(xOrCoords, y, z) {
        var _this;

        _classCallCheck(this, Vector3d);

        _this = _super.call(this, xOrCoords, y);

        if (typeof xOrCoords !== "number" && xOrCoords) {
            _this.z = xOrCoords.z;
        } else if (z !== undefined) {
            _this.z = z;
        } else {
            throw new Error("tsParticles - Vector not initialized correctly");
        }

        return _this;
    }

    _createClass(Vector3d, [{
        key: "add",
        value: function add(v) {
            return v instanceof Vector3d ? Vector3d.create(this.x + v.x, this.y + v.y, this.z + v.z) : _get(_getPrototypeOf(Vector3d.prototype), "add", this).call(this, v);
        }
    }, {
        key: "addTo",
        value: function addTo(v) {
            _get(_getPrototypeOf(Vector3d.prototype), "addTo", this).call(this, v);

            if (v instanceof Vector3d) {
                this.z += v.z;
            }
        }
    }, {
        key: "sub",
        value: function sub(v) {
            return v instanceof Vector3d ? Vector3d.create(this.x - v.x, this.y - v.y, this.z - v.z) : _get(_getPrototypeOf(Vector3d.prototype), "sub", this).call(this, v);
        }
    }, {
        key: "subFrom",
        value: function subFrom(v) {
            _get(_getPrototypeOf(Vector3d.prototype), "subFrom", this).call(this, v);

            if (v instanceof Vector3d) {
                this.z -= v.z;
            }
        }
    }, {
        key: "mult",
        value: function mult(n) {
            return Vector3d.create(this.x * n, this.y * n, this.z * n);
        }
    }, {
        key: "multTo",
        value: function multTo(n) {
            _get(_getPrototypeOf(Vector3d.prototype), "multTo", this).call(this, n);

            this.z *= n;
        }
    }, {
        key: "div",
        value: function div(n) {
            return Vector3d.create(this.x / n, this.y / n, this.z / n);
        }
    }, {
        key: "divTo",
        value: function divTo(n) {
            _get(_getPrototypeOf(Vector3d.prototype), "divTo", this).call(this, n);

            this.z /= n;
        }
    }, {
        key: "copy",
        value: function copy() {
            return Vector3d.clone(this);
        }
    }, {
        key: "setTo",
        value: function setTo(v) {
            _get(_getPrototypeOf(Vector3d.prototype), "setTo", this).call(this, v);

            var v3d = v;

            if (v3d.z !== undefined) {
                this.z = v3d.z;
            }
        }
    }], [{
        key: "clone",
        value: function clone(source) {
            return Vector3d.create(source.x, source.y, source.z);
        }
    }, {
        key: "create",
        value: function create(x, y, z) {
            return new Vector3d(x, y, z);
        }
    }, {
        key: "origin",
        get: function get() {
            return Vector3d.create(0, 0, 0);
        }
    }]);

    return Vector3d;
}(Vector);