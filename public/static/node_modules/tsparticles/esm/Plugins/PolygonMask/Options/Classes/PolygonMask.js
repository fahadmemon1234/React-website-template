import _classCallCheck from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createClass";
import {
    PolygonMaskDraw
} from "./PolygonMaskDraw";
import {
    PolygonMaskInline
} from "./PolygonMaskInline";
import {
    PolygonMaskLocalSvg
} from "./PolygonMaskLocalSvg";
import {
    PolygonMaskMove
} from "./PolygonMaskMove";
import {
    deepExtend
} from "../../../../Utils/Utils";
export var PolygonMask = /*#__PURE__*/ function() {
    function PolygonMask() {
        _classCallCheck(this, PolygonMask);

        this.draw = new PolygonMaskDraw();
        this.enable = false;
        this.inline = new PolygonMaskInline();
        this.move = new PolygonMaskMove();
        this.scale = 1;
        this.type = "none";
    }

    _createClass(PolygonMask, [{
        key: "inlineArrangement",
        get: function get() {
            return this.inline.arrangement;
        },
        set: function set(value) {
            this.inline.arrangement = value;
        }
    }, {
        key: "load",
        value: function load(data) {
            var _a;

            if (!data) {
                return;
            }

            this.draw.load(data.draw);
            var inline = (_a = data.inline) !== null && _a !== void 0 ? _a : {
                arrangement: data.inlineArrangement
            };

            if (inline !== undefined) {
                this.inline.load(inline);
            }

            this.move.load(data.move);

            if (data.scale !== undefined) {
                this.scale = data.scale;
            }

            if (data.type !== undefined) {
                this.type = data.type;
            }

            if (data.enable !== undefined) {
                this.enable = data.enable;
            } else {
                this.enable = this.type !== "none";
            }

            if (data.url !== undefined) {
                this.url = data.url;
            }

            if (data.data !== undefined) {
                if (typeof data.data === "string") {
                    this.data = data.data;
                } else {
                    this.data = new PolygonMaskLocalSvg();
                    this.data.load(data.data);
                }
            }

            if (data.position !== undefined) {
                this.position = deepExtend({}, data.position);
            }
        }
    }]);

    return PolygonMask;
}();