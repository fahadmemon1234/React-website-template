import _classCallCheck from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createClass";
import _get from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/get";
import _getPrototypeOf from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/getPrototypeOf";
import _inherits from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/inherits";
import _createSuper from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createSuper";
import {
    AbsorberSizeLimit
} from "./AbsorberSizeLimit";
import {
    ValueWithRandom
} from "../../../../Options/Classes/ValueWithRandom";
export var AbsorberSize = /*#__PURE__*/ function(_ValueWithRandom) {
    _inherits(AbsorberSize, _ValueWithRandom);

    var _super = _createSuper(AbsorberSize);

    function AbsorberSize() {
        var _this;

        _classCallCheck(this, AbsorberSize);

        _this = _super.call(this);
        _this.density = 5;
        _this.random.minimumValue = 1;
        _this.value = 50;
        _this.limit = new AbsorberSizeLimit();
        return _this;
    }

    _createClass(AbsorberSize, [{
        key: "load",
        value: function load(data) {
            if (!data) {
                return;
            }

            _get(_getPrototypeOf(AbsorberSize.prototype), "load", this).call(this, data);

            if (data.density !== undefined) {
                this.density = data.density;
            }

            if (typeof data.limit === "number") {
                this.limit.radius = data.limit;
            } else {
                this.limit.load(data.limit);
            }
        }
    }]);

    return AbsorberSize;
}(ValueWithRandom);