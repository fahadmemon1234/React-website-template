import _createForOfIteratorHelper from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createForOfIteratorHelper";
import _classCallCheck from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createClass";

var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};

var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};

var _Emitters_engine;

import {
    deepExtend,
    itemFromArray
} from "../../Utils/Utils";
import {
    Emitter
} from "./Options/Classes/Emitter";
import {
    EmitterInstance
} from "./EmitterInstance";
export var Emitters = /*#__PURE__*/ function() {
    function Emitters(engine, container) {
        var _this = this;

        _classCallCheck(this, Emitters);

        this.container = container;

        _Emitters_engine.set(this, void 0);

        __classPrivateFieldSet(this, _Emitters_engine, engine, "f");

        this.array = [];
        this.emitters = [];
        this.interactivityEmitters = [];
        var overridableContainer = container;

        overridableContainer.getEmitter = function(idxOrName) {
            return idxOrName === undefined || typeof idxOrName === "number" ? _this.array[idxOrName || 0] : _this.array.find(function(t) {
                return t.name === idxOrName;
            });
        };

        overridableContainer.addEmitter = function(options, position) {
            return _this.addEmitter(options, position);
        };

        overridableContainer.removeEmitter = function(idxOrName) {
            var emitter = overridableContainer.getEmitter(idxOrName);

            if (emitter) {
                _this.removeEmitter(emitter);
            }
        };

        overridableContainer.playEmitter = function(idxOrName) {
            var emitter = overridableContainer.getEmitter(idxOrName);

            if (emitter) {
                emitter.externalPlay();
            }
        };

        overridableContainer.pauseEmitter = function(idxOrName) {
            var emitter = overridableContainer.getEmitter(idxOrName);

            if (emitter) {
                emitter.externalPause();
            }
        };
    }

    _createClass(Emitters, [{
        key: "init",
        value: function init(options) {
            var _a, _b;

            if (!options) {
                return;
            }

            if (options.emitters) {
                if (options.emitters instanceof Array) {
                    this.emitters = options.emitters.map(function(s) {
                        var tmp = new Emitter();
                        tmp.load(s);
                        return tmp;
                    });
                } else {
                    if (this.emitters instanceof Array) {
                        this.emitters = new Emitter();
                    }

                    this.emitters.load(options.emitters);
                }
            }

            var interactivityEmitters = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.emitters;

            if (interactivityEmitters) {
                if (interactivityEmitters instanceof Array) {
                    this.interactivityEmitters = interactivityEmitters.map(function(s) {
                        var tmp = new Emitter();
                        tmp.load(s);
                        return tmp;
                    });
                } else {
                    if (this.interactivityEmitters instanceof Array) {
                        this.interactivityEmitters = new Emitter();
                    }

                    this.interactivityEmitters.load(interactivityEmitters);
                }
            }

            if (this.emitters instanceof Array) {
                var _iterator = _createForOfIteratorHelper(this.emitters),
                    _step;

                try {
                    for (_iterator.s(); !(_step = _iterator.n()).done;) {
                        var emitterOptions = _step.value;
                        this.addEmitter(emitterOptions);
                    }
                } catch (err) {
                    _iterator.e(err);
                } finally {
                    _iterator.f();
                }
            } else {
                this.addEmitter(this.emitters);
            }
        }
    }, {
        key: "play",
        value: function play() {
            var _iterator2 = _createForOfIteratorHelper(this.array),
                _step2;

            try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                    var emitter = _step2.value;
                    emitter.play();
                }
            } catch (err) {
                _iterator2.e(err);
            } finally {
                _iterator2.f();
            }
        }
    }, {
        key: "pause",
        value: function pause() {
            var _iterator3 = _createForOfIteratorHelper(this.array),
                _step3;

            try {
                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                    var emitter = _step3.value;
                    emitter.pause();
                }
            } catch (err) {
                _iterator3.e(err);
            } finally {
                _iterator3.f();
            }
        }
    }, {
        key: "stop",
        value: function stop() {
            this.array = [];
        }
    }, {
        key: "update",
        value: function update(delta) {
            var _iterator4 = _createForOfIteratorHelper(this.array),
                _step4;

            try {
                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                    var emitter = _step4.value;
                    emitter.update(delta);
                }
            } catch (err) {
                _iterator4.e(err);
            } finally {
                _iterator4.f();
            }
        }
    }, {
        key: "handleClickMode",
        value: function handleClickMode(mode) {
            var emitterOptions = this.emitters,
                modeEmitters = this.interactivityEmitters;

            if (mode === "emitter") {
                var emitterModeOptions;

                if (modeEmitters instanceof Array) {
                    if (modeEmitters.length > 0) {
                        emitterModeOptions = itemFromArray(modeEmitters);
                    }
                } else {
                    emitterModeOptions = modeEmitters;
                }

                var emittersOptions = emitterModeOptions !== null && emitterModeOptions !== void 0 ? emitterModeOptions : emitterOptions instanceof Array ? itemFromArray(emitterOptions) : emitterOptions,
                    ePosition = this.container.interactivity.mouse.clickPosition;
                this.addEmitter(deepExtend({}, emittersOptions), ePosition);
            }
        }
    }, {
        key: "resize",
        value: function resize() {
            var _iterator5 = _createForOfIteratorHelper(this.array),
                _step5;

            try {
                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                    var emitter = _step5.value;
                    emitter.resize();
                }
            } catch (err) {
                _iterator5.e(err);
            } finally {
                _iterator5.f();
            }
        }
    }, {
        key: "addEmitter",
        value: function addEmitter(options, position) {
            var emitterOptions = new Emitter();
            emitterOptions.load(options);
            var emitter = new EmitterInstance(__classPrivateFieldGet(this, _Emitters_engine, "f"), this, this.container, emitterOptions, position);
            this.array.push(emitter);
            return emitter;
        }
    }, {
        key: "removeEmitter",
        value: function removeEmitter(emitter) {
            var index = this.array.indexOf(emitter);

            if (index >= 0) {
                this.array.splice(index, 1);
            }
        }
    }]);

    return Emitters;
}();
_Emitters_engine = new WeakMap();