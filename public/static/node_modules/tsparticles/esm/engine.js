import _createForOfIteratorHelper from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createForOfIteratorHelper";
import _asyncToGenerator from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/classCallCheck";
import _createClass from "F:\\02-React\\05-Approve\\01-trydo\\trydo\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/createClass";

function _regeneratorRuntime() {
    "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
    _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
    };
    var exports = {},
        Op = Object.prototype,
        hasOwn = Op.hasOwnProperty,
        $Symbol = "function" == typeof Symbol ? Symbol : {},
        iteratorSymbol = $Symbol.iterator || "@@iterator",
        asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
        toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
            value: value,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }), obj[key];
    }
    try {
        define({}, "");
    } catch (err) {
        define = function define(obj, key, value) {
            return obj[key] = value;
        };
    }

    function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function(innerFn, self, context) {
            var state = "suspendedStart";
            return function(method, arg) {
                if ("executing" === state) throw new Error("Generator is already running");
                if ("completed" === state) {
                    if ("throw" === method) throw arg;
                    return doneResult();
                }
                for (context.method = method, context.arg = arg;;) {
                    var delegate = context.delegate;
                    if (delegate) {
                        var delegateResult = maybeInvokeDelegate(delegate, context);
                        if (delegateResult) {
                            if (delegateResult === ContinueSentinel) continue;
                            return delegateResult;
                        }
                    }
                    if ("next" === context.method) context.sent = context._sent = context.arg;
                    else if ("throw" === context.method) {
                        if ("suspendedStart" === state) throw state = "completed", context.arg;
                        context.dispatchException(context.arg);
                    } else "return" === context.method && context.abrupt("return", context.arg);
                    state = "executing";
                    var record = tryCatch(innerFn, self, context);
                    if ("normal" === record.type) {
                        if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                        return {
                            value: record.arg,
                            done: context.done
                        };
                    }
                    "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
                }
            };
        }(innerFn, self, context), generator;
    }

    function tryCatch(fn, obj, arg) {
        try {
            return {
                type: "normal",
                arg: fn.call(obj, arg)
            };
        } catch (err) {
            return {
                type: "throw",
                arg: err
            };
        }
    }
    exports.wrap = wrap;
    var ContinueSentinel = {};

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {}
    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function() {
        return this;
    });
    var getProto = Object.getPrototypeOf,
        NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

    function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function(method) {
            define(prototype, method, function(arg) {
                return this._invoke(method, arg);
            });
        });
    }

    function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
            var record = tryCatch(generator[method], generator, arg);
            if ("throw" !== record.type) {
                var result = record.arg,
                    value = result.value;
                return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function(value) {
                    invoke("next", value, resolve, reject);
                }, function(err) {
                    invoke("throw", err, resolve, reject);
                }) : PromiseImpl.resolve(value).then(function(unwrapped) {
                    result.value = unwrapped, resolve(result);
                }, function(error) {
                    return invoke("throw", error, resolve, reject);
                });
            }
            reject(record.arg);
        }
        var previousPromise;
        this._invoke = function(method, arg) {
            function callInvokeWithMethodAndArg() {
                return new PromiseImpl(function(resolve, reject) {
                    invoke(method, arg, resolve, reject);
                });
            }
            return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
    }

    function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];
        if (undefined === method) {
            if (context.delegate = null, "throw" === context.method) {
                if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
                context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
            }
            return ContinueSentinel;
        }
        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
    }

    function pushTryEntry(locs) {
        var entry = {
            tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
    }

    function Context(tryLocsList) {
        this.tryEntries = [{
            tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
    }

    function values(iterable) {
        if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];
            if (iteratorMethod) return iteratorMethod.call(iterable);
            if ("function" == typeof iterable.next) return iterable;
            if (!isNaN(iterable.length)) {
                var i = -1,
                    next = function next() {
                        for (; ++i < iterable.length;) {
                            if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
                        }
                        return next.value = undefined, next.done = !0, next;
                    };
                return next.next = next;
            }
        }
        return {
            next: doneResult
        };
    }

    function doneResult() {
        return {
            value: undefined,
            done: !0
        };
    }
    return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function(genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
    }, exports.mark = function(genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
    }, exports.awrap = function(arg) {
        return {
            __await: arg
        };
    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
        return this;
    }), exports.AsyncIterator = AsyncIterator, exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
        });
    }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function() {
        return this;
    }), define(Gp, "toString", function() {
        return "[object Generator]";
    }), exports.keys = function(object) {
        var keys = [];
        for (var key in object) {
            keys.push(key);
        }
        return keys.reverse(),
            function next() {
                for (; keys.length;) {
                    var key = keys.pop();
                    if (key in object) return next.value = key, next.done = !1, next;
                }
                return next.done = !0, next;
            };
    }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
            if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset)
                for (var name in this) {
                    "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
                }
        },
        stop: function stop() {
            this.done = !0;
            var rootRecord = this.tryEntries[0].completion;
            if ("throw" === rootRecord.type) throw rootRecord.arg;
            return this.rval;
        },
        dispatchException: function dispatchException(exception) {
            if (this.done) throw exception;
            var context = this;

            function handle(loc, caught) {
                return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
            }
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                var entry = this.tryEntries[i],
                    record = entry.completion;
                if ("root" === entry.tryLoc) return handle("end");
                if (entry.tryLoc <= this.prev) {
                    var hasCatch = hasOwn.call(entry, "catchLoc"),
                        hasFinally = hasOwn.call(entry, "finallyLoc");
                    if (hasCatch && hasFinally) {
                        if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                        if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                    } else if (hasCatch) {
                        if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                    } else {
                        if (!hasFinally) throw new Error("try statement without catch or finally");
                        if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                    }
                }
            }
        },
        abrupt: function abrupt(type, arg) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                var entry = this.tryEntries[i];
                if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                    var finallyEntry = entry;
                    break;
                }
            }
            finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
            var record = finallyEntry ? finallyEntry.completion : {};
            return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
            if ("throw" === record.type) throw record.arg;
            return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                var entry = this.tryEntries[i];
                if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
            }
        },
        catch: function _catch(tryLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                var entry = this.tryEntries[i];
                if (entry.tryLoc === tryLoc) {
                    var record = entry.completion;
                    if ("throw" === record.type) {
                        var thrown = record.arg;
                        resetTryEntry(entry);
                    }
                    return thrown;
                }
            }
            throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
            return this.delegate = {
                iterator: values(iterable),
                resultName: resultName,
                nextLoc: nextLoc
            }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
    }, exports;
}

var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};

var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};

var _Engine_initialized, _Engine_loader;

import {
    Loader
} from "./Core/Loader";
import {
    Plugins
} from "./Core/Utils/Plugins";
export var Engine = /*#__PURE__*/ function() {
    function Engine() {
        _classCallCheck(this, Engine);

        _Engine_initialized.set(this, void 0);

        _Engine_loader.set(this, void 0);

        __classPrivateFieldSet(this, _Engine_initialized, false, "f");

        this.domArray = [];

        __classPrivateFieldSet(this, _Engine_loader, new Loader(this), "f");

        this.plugins = new Plugins(this);
    }

    _createClass(Engine, [{
        key: "init",
        value: function init() {
            if (!__classPrivateFieldGet(this, _Engine_initialized, "f")) {
                __classPrivateFieldSet(this, _Engine_initialized, true, "f");
            }
        }
    }, {
        key: "loadFromArray",
        value: function() {
            var _loadFromArray = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime().mark(function _callee(tagId, options, index) {
                return _regeneratorRuntime().wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                return _context.abrupt("return", __classPrivateFieldGet(this, _Engine_loader, "f").load(tagId, options, index));

                            case 1:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function loadFromArray(_x, _x2, _x3) {
                return _loadFromArray.apply(this, arguments);
            }

            return loadFromArray;
        }()
    }, {
        key: "load",
        value: function() {
            var _load = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime().mark(function _callee2(tagId, options) {
                return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                return _context2.abrupt("return", __classPrivateFieldGet(this, _Engine_loader, "f").load(tagId, options));

                            case 1:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function load(_x4, _x5) {
                return _load.apply(this, arguments);
            }

            return load;
        }()
    }, {
        key: "set",
        value: function() {
            var _set = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime().mark(function _callee3(id, element, options) {
                return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                return _context3.abrupt("return", __classPrivateFieldGet(this, _Engine_loader, "f").set(id, element, options));

                            case 1:
                            case "end":
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function set(_x6, _x7, _x8) {
                return _set.apply(this, arguments);
            }

            return set;
        }()
    }, {
        key: "loadJSON",
        value: function() {
            var _loadJSON = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime().mark(function _callee4(tagId, pathConfigJson, index) {
                return _regeneratorRuntime().wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                return _context4.abrupt("return", __classPrivateFieldGet(this, _Engine_loader, "f").loadJSON(tagId, pathConfigJson, index));

                            case 1:
                            case "end":
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            function loadJSON(_x9, _x10, _x11) {
                return _loadJSON.apply(this, arguments);
            }

            return loadJSON;
        }()
    }, {
        key: "setJSON",
        value: function() {
            var _setJSON = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime().mark(function _callee5(id, element, pathConfigJson, index) {
                return _regeneratorRuntime().wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                return _context5.abrupt("return", __classPrivateFieldGet(this, _Engine_loader, "f").setJSON(id, element, pathConfigJson, index));

                            case 1:
                            case "end":
                                return _context5.stop();
                        }
                    }
                }, _callee5, this);
            }));

            function setJSON(_x12, _x13, _x14, _x15) {
                return _setJSON.apply(this, arguments);
            }

            return setJSON;
        }()
    }, {
        key: "setOnClickHandler",
        value: function setOnClickHandler(callback) {
            __classPrivateFieldGet(this, _Engine_loader, "f").setOnClickHandler(callback);
        }
    }, {
        key: "dom",
        value: function dom() {
            return __classPrivateFieldGet(this, _Engine_loader, "f").dom();
        }
    }, {
        key: "domItem",
        value: function domItem(index) {
            return __classPrivateFieldGet(this, _Engine_loader, "f").domItem(index);
        }
    }, {
        key: "refresh",
        value: function() {
            var _refresh = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime().mark(function _callee6() {
                var _iterator, _step, instance;

                return _regeneratorRuntime().wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                _iterator = _createForOfIteratorHelper(this.dom());
                                _context6.prev = 1;

                                _iterator.s();

                            case 3:
                                if ((_step = _iterator.n()).done) {
                                    _context6.next = 9;
                                    break;
                                }

                                instance = _step.value;
                                _context6.next = 7;
                                return instance.refresh();

                            case 7:
                                _context6.next = 3;
                                break;

                            case 9:
                                _context6.next = 14;
                                break;

                            case 11:
                                _context6.prev = 11;
                                _context6.t0 = _context6["catch"](1);

                                _iterator.e(_context6.t0);

                            case 14:
                                _context6.prev = 14;

                                _iterator.f();

                                return _context6.finish(14);

                            case 17:
                            case "end":
                                return _context6.stop();
                        }
                    }
                }, _callee6, this, [
                    [1, 11, 14, 17]
                ]);
            }));

            function refresh() {
                return _refresh.apply(this, arguments);
            }

            return refresh;
        }()
    }, {
        key: "addShape",
        value: function() {
            var _addShape = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime().mark(function _callee7(shape, drawer, init, afterEffect, destroy) {
                var customDrawer;
                return _regeneratorRuntime().wrap(function _callee7$(_context7) {
                    while (1) {
                        switch (_context7.prev = _context7.next) {
                            case 0:
                                if (typeof drawer === "function") {
                                    customDrawer = {
                                        afterEffect: afterEffect,
                                        destroy: destroy,
                                        draw: drawer,
                                        init: init
                                    };
                                } else {
                                    customDrawer = drawer;
                                }

                                this.plugins.addShapeDrawer(shape, customDrawer);
                                _context7.next = 4;
                                return this.refresh();

                            case 4:
                            case "end":
                                return _context7.stop();
                        }
                    }
                }, _callee7, this);
            }));

            function addShape(_x16, _x17, _x18, _x19, _x20) {
                return _addShape.apply(this, arguments);
            }

            return addShape;
        }()
    }, {
        key: "addPreset",
        value: function() {
            var _addPreset = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime().mark(function _callee8(preset, options) {
                var override,
                    _args8 = arguments;
                return _regeneratorRuntime().wrap(function _callee8$(_context8) {
                    while (1) {
                        switch (_context8.prev = _context8.next) {
                            case 0:
                                override = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : false;
                                this.plugins.addPreset(preset, options, override);
                                _context8.next = 4;
                                return this.refresh();

                            case 4:
                            case "end":
                                return _context8.stop();
                        }
                    }
                }, _callee8, this);
            }));

            function addPreset(_x21, _x22) {
                return _addPreset.apply(this, arguments);
            }

            return addPreset;
        }()
    }, {
        key: "addPlugin",
        value: function() {
            var _addPlugin = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime().mark(function _callee9(plugin) {
                return _regeneratorRuntime().wrap(function _callee9$(_context9) {
                    while (1) {
                        switch (_context9.prev = _context9.next) {
                            case 0:
                                this.plugins.addPlugin(plugin);
                                _context9.next = 3;
                                return this.refresh();

                            case 3:
                            case "end":
                                return _context9.stop();
                        }
                    }
                }, _callee9, this);
            }));

            function addPlugin(_x23) {
                return _addPlugin.apply(this, arguments);
            }

            return addPlugin;
        }()
    }, {
        key: "addPathGenerator",
        value: function() {
            var _addPathGenerator = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime().mark(function _callee10(name, generator) {
                return _regeneratorRuntime().wrap(function _callee10$(_context10) {
                    while (1) {
                        switch (_context10.prev = _context10.next) {
                            case 0:
                                this.plugins.addPathGenerator(name, generator);
                                _context10.next = 3;
                                return this.refresh();

                            case 3:
                            case "end":
                                return _context10.stop();
                        }
                    }
                }, _callee10, this);
            }));

            function addPathGenerator(_x24, _x25) {
                return _addPathGenerator.apply(this, arguments);
            }

            return addPathGenerator;
        }()
    }, {
        key: "addInteractor",
        value: function() {
            var _addInteractor = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime().mark(function _callee11(name, interactorInitializer) {
                return _regeneratorRuntime().wrap(function _callee11$(_context11) {
                    while (1) {
                        switch (_context11.prev = _context11.next) {
                            case 0:
                                this.plugins.addInteractor(name, interactorInitializer);
                                _context11.next = 3;
                                return this.refresh();

                            case 3:
                            case "end":
                                return _context11.stop();
                        }
                    }
                }, _callee11, this);
            }));

            function addInteractor(_x26, _x27) {
                return _addInteractor.apply(this, arguments);
            }

            return addInteractor;
        }()
    }, {
        key: "addMover",
        value: function() {
            var _addMover = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime().mark(function _callee12(name, moverInitializer) {
                return _regeneratorRuntime().wrap(function _callee12$(_context12) {
                    while (1) {
                        switch (_context12.prev = _context12.next) {
                            case 0:
                                this.plugins.addParticleMover(name, moverInitializer);
                                _context12.next = 3;
                                return this.refresh();

                            case 3:
                            case "end":
                                return _context12.stop();
                        }
                    }
                }, _callee12, this);
            }));

            function addMover(_x28, _x29) {
                return _addMover.apply(this, arguments);
            }

            return addMover;
        }()
    }, {
        key: "addParticleUpdater",
        value: function() {
            var _addParticleUpdater = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime().mark(function _callee13(name, updaterInitializer) {
                return _regeneratorRuntime().wrap(function _callee13$(_context13) {
                    while (1) {
                        switch (_context13.prev = _context13.next) {
                            case 0:
                                this.plugins.addParticleUpdater(name, updaterInitializer);
                                _context13.next = 3;
                                return this.refresh();

                            case 3:
                            case "end":
                                return _context13.stop();
                        }
                    }
                }, _callee13, this);
            }));

            function addParticleUpdater(_x30, _x31) {
                return _addParticleUpdater.apply(this, arguments);
            }

            return addParticleUpdater;
        }()
    }]);

    return Engine;
}();
_Engine_initialized = new WeakMap(), _Engine_loader = new WeakMap();